import { ref, computed } from 'vue'
import logger from '../utils/logger.js'

/**
 * Composable pour gÃ©rer l'Ã©tat de sÃ©lection des joueurs
 * Centralise la logique de sÃ©lection et fournit un Ã©tat rÃ©actif partagÃ©
 */
export function usePlayerSelection() {
  // Ã‰tat de sÃ©lection
  const selectedPlayerId = ref(null)
  const showPlayerModal = ref(false)
  
  // Computed pour obtenir l'objet joueur complet
  const selectedPlayer = computed(() => {
    // Cette fonction sera injectÃ©e par le composant parent qui a accÃ¨s Ã  la liste des joueurs
    return null // Sera surchargÃ©e par le parent
  })
  
  // Computed pour l'affichage du texte dans le dropdown
  const participantsDisplayText = computed(() => {
    if (selectedPlayerId.value && selectedPlayer.value) {
      // Un joueur spÃ©cifique est sÃ©lectionnÃ©
      return null // Le nom du joueur sera affichÃ© via selectedPlayer.name
    } else {
      // Aucun joueur sÃ©lectionnÃ© = tous les joueurs
      return 'Tous'
    }
  })
  
  // Actions
  const selectPlayer = (player) => {
    selectedPlayerId.value = player?.id || null
    logger.debug('ðŸŽ¯ Joueur sÃ©lectionnÃ©:', player?.name || 'Tous', player?.id || null)
  }
  
  const selectAllPlayers = () => {
    selectedPlayerId.value = null
    logger.debug('ðŸŽ¯ SÃ©lection de tous les joueurs')
  }
  
  const togglePlayerModal = () => {
    showPlayerModal.value = !showPlayerModal.value
  }
  
  const closePlayerModal = () => {
    showPlayerModal.value = false
  }
  
  // Initialisation avec un joueur par dÃ©faut si nÃ©cessaire
  const initializeWithDefaultPlayer = (defaultPlayerId) => {
    if (defaultPlayerId && !selectedPlayerId.value) {
      selectedPlayerId.value = defaultPlayerId
    }
  }
  
  return {
    // Ã‰tat
    selectedPlayerId,
    showPlayerModal,
    selectedPlayer,
    participantsDisplayText,
    
    // Actions
    selectPlayer,
    selectAllPlayers,
    togglePlayerModal,
    closePlayerModal,
    initializeWithDefaultPlayer
  }
}
