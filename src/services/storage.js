// storage.js
import logger from './logger.js'
import { createRemindersForSelection, removeRemindersForPlayer } from './reminderService.js'
import firestoreService from './firestoreService.js'

// Constantes pour les r√¥les et leurs emojis
export const ROLES = {
  PLAYER: 'player',
  VOLUNTEER: 'volunteer', 
  MC: 'mc',
  DJ: 'dj',
  REFEREE: 'referee',
  ASSISTANT_REFEREE: 'assistant_referee',
  LIGHTING: 'lighting',
  COACH: 'coach',
  STAGE_MANAGER: 'stage_manager'
}

export const ROLE_EMOJIS = {
  [ROLES.PLAYER]: 'üé≠',
  [ROLES.VOLUNTEER]: 'ü§ù',
  [ROLES.MC]: 'üé§',
  [ROLES.DJ]: 'üéß',
  [ROLES.REFEREE]: 'üôÖ',
  [ROLES.ASSISTANT_REFEREE]: 'üíÅ',
  [ROLES.LIGHTING]: 'üî¶',
  [ROLES.COACH]: 'üß¢',
  [ROLES.STAGE_MANAGER]: 'üé¨'
}

export const ROLE_LABELS = {
  [ROLES.PLAYER]: 'Improvisateur.trices',
  [ROLES.VOLUNTEER]: 'B√©n√©voles',
  [ROLES.MC]: 'MC',
  [ROLES.DJ]: 'DJ',
  [ROLES.REFEREE]: 'Arbitre',
  [ROLES.ASSISTANT_REFEREE]: 'Assistant.es',
  [ROLES.LIGHTING]: 'Lumi√®re',
  [ROLES.COACH]: 'Coach',
  [ROLES.STAGE_MANAGER]: 'R√©gisseur.euses'
}

// Labels au singulier pour les modales de disponibilit√© (individuelles)
export const ROLE_LABELS_SINGULAR = {
  [ROLES.PLAYER]: 'Improvisateur.trice',
  [ROLES.VOLUNTEER]: 'B√©n√©vole',
  [ROLES.MC]: 'MC',
  [ROLES.DJ]: 'DJ',
  [ROLES.REFEREE]: 'Arbitre',
  [ROLES.ASSISTANT_REFEREE]: 'Assistant.e',
  [ROLES.LIGHTING]: 'Lumi√®re',
  [ROLES.COACH]: 'Coach',
  [ROLES.STAGE_MANAGER]: 'R√©gisseur.euse'
}

// Ordre d'affichage des r√¥les
export const ROLE_DISPLAY_ORDER = [
  ROLES.PLAYER,
  ROLES.DJ,
  ROLES.MC,
  ROLES.VOLUNTEER,
  ROLES.REFEREE,
  ROLES.ASSISTANT_REFEREE,
  ROLES.LIGHTING,
  ROLES.COACH,
  ROLES.STAGE_MANAGER
]

// Labels par genre (nouveau syst√®me inclusif)
export const ROLE_LABELS_BY_GENDER = {
  male: {
    [ROLES.PLAYER]: 'Improvisateur',
    [ROLES.VOLUNTEER]: 'B√©n√©vole',
    [ROLES.MC]: 'MC',
    [ROLES.DJ]: 'DJ',
    [ROLES.REFEREE]: 'Arbitre',
    [ROLES.ASSISTANT_REFEREE]: 'Assistant',
    [ROLES.LIGHTING]: 'Lumi√®re',
    [ROLES.COACH]: 'Coach',
    [ROLES.STAGE_MANAGER]: 'R√©gisseur'
  },
  female: {
    [ROLES.PLAYER]: 'Improvisatrice',
    [ROLES.VOLUNTEER]: 'B√©n√©vole',
    [ROLES.MC]: 'MC',
    [ROLES.DJ]: 'DJ',
    [ROLES.REFEREE]: 'Arbitre',
    [ROLES.ASSISTANT_REFEREE]: 'Assistante',
    [ROLES.LIGHTING]: 'Lumi√®re',
    [ROLES.COACH]: 'Coach',
    [ROLES.STAGE_MANAGER]: 'R√©gisseuse'
  },
  'non-specified': {
    [ROLES.PLAYER]: 'Improvisateur.trice',
    [ROLES.VOLUNTEER]: 'B√©n√©vole',
    [ROLES.MC]: 'MC',
    [ROLES.DJ]: 'DJ',
    [ROLES.REFEREE]: 'Arbitre',
    [ROLES.ASSISTANT_REFEREE]: 'Assistant.e',
    [ROLES.LIGHTING]: 'Lumi√®re',
    [ROLES.COACH]: 'Coach',
    [ROLES.STAGE_MANAGER]: 'R√©gisseur.euse'
  }
}

export const ROLE_LABELS_PLURAL_BY_GENDER = {
  male: {
    [ROLES.PLAYER]: 'Improvisateurs',
    [ROLES.VOLUNTEER]: 'B√©n√©voles',
    [ROLES.MC]: 'MC',
    [ROLES.DJ]: 'DJ',
    [ROLES.REFEREE]: 'Arbitres',
    [ROLES.ASSISTANT_REFEREE]: 'Assistants',
    [ROLES.LIGHTING]: 'Lumi√®res',
    [ROLES.COACH]: 'Coachs',
    [ROLES.STAGE_MANAGER]: 'R√©gisseurs'
  },
  female: {
    [ROLES.PLAYER]: 'Improvisatrices',
    [ROLES.VOLUNTEER]: 'B√©n√©voles',
    [ROLES.MC]: 'MC',
    [ROLES.DJ]: 'DJ',
    [ROLES.REFEREE]: 'Arbitres',
    [ROLES.ASSISTANT_REFEREE]: 'Assistantes',
    [ROLES.LIGHTING]: 'Lumi√®res',
    [ROLES.COACH]: 'Coachs',
    [ROLES.STAGE_MANAGER]: 'R√©gisseuses'
  },
  'non-specified': {
    [ROLES.PLAYER]: 'Improvisateur.trices',
    [ROLES.VOLUNTEER]: 'B√©n√©voles',
    [ROLES.MC]: 'MC',
    [ROLES.DJ]: 'DJ',
    [ROLES.REFEREE]: 'Arbitres',
    [ROLES.ASSISTANT_REFEREE]: 'Assistant.es',
    [ROLES.LIGHTING]: 'Lumi√®res',
    [ROLES.COACH]: 'Coachs',
    [ROLES.STAGE_MANAGER]: 'R√©gisseur.euses'
  }
}

/**
 * Fonction r√©tro-compatible pour obtenir le label d'un r√¥le
 * @param {string} role - Le r√¥le (ex: ROLES.PLAYER)
 * @param {string} userGender - Le genre de l'utilisateur ('male', 'female', 'non-specified', ou undefined)
 * @param {boolean} plural - Si true, retourne la forme plurielle
 * @returns {string} Le label du r√¥le adapt√© au genre
 */
export function getRoleLabel(role, userGender = 'non-specified', plural = false) {
  // R√©tro-compatibilit√© : si userGender n'est pas d√©fini ou invalide, utiliser 'non-specified'
  const validGenders = ['male', 'female', 'non-specified']
  const gender = validGenders.includes(userGender) ? userGender : 'non-specified'
  
  if (plural) {
    return ROLE_LABELS_PLURAL_BY_GENDER[gender][role] || ROLE_LABELS[role] || role
  } else {
    return ROLE_LABELS_BY_GENDER[gender][role] || ROLE_LABELS_SINGULAR[role] || role
  }
}

// Ic√¥nes pour chaque type d'√©v√©nement
export const EVENT_TYPE_ICONS = {
  match: '‚öîÔ∏è',
  cabaret: 'üé≠',
  longform: 'üé™',
  deplacement: 'üöå',
  custom: 'üìä'
}

// Mod√®les de r√¥les pr√©d√©finis pour diff√©rents types d'√©v√©nements
export const ROLE_TEMPLATES = {
  match: {
    name: 'Match',
    description: 'Comp√©tition avec arbitrage',
    roles: {
      [ROLES.PLAYER]: 5,
      [ROLES.MC]: 1,
      [ROLES.REFEREE]: 1,
      [ROLES.ASSISTANT_REFEREE]: 2,
      [ROLES.VOLUNTEER]: 5,
      [ROLES.DJ]: 0,
      [ROLES.LIGHTING]: 0,
      [ROLES.COACH]: 0,
      [ROLES.STAGE_MANAGER]: 0
    }
  },
  cabaret: {
    name: 'Cabaret',
    description: '√âv√©nement avec MC et DJ',
    roles: {
      [ROLES.PLAYER]: 5,
      [ROLES.MC]: 1,
      [ROLES.DJ]: 1,
      [ROLES.VOLUNTEER]: 0,
      [ROLES.REFEREE]: 0,
      [ROLES.ASSISTANT_REFEREE]: 0,
      [ROLES.LIGHTING]: 0,
      [ROLES.COACH]: 0,
      [ROLES.STAGE_MANAGER]: 0
    }
  },
  longform: {
    name: 'Long Form',
    description: 'Spectacle long format avec MC et DJ',
    roles: {
      [ROLES.PLAYER]: 4,
      [ROLES.MC]: 1,
      [ROLES.DJ]: 1,
      [ROLES.VOLUNTEER]: 0,
      [ROLES.REFEREE]: 0,
      [ROLES.ASSISTANT_REFEREE]: 0,
      [ROLES.LIGHTING]: 0,
      [ROLES.COACH]: 0,
      [ROLES.STAGE_MANAGER]: 0
    }
  },
  deplacement: {
    name: 'D√©placement',
    description: '√âv√©nement ext√©rieur simple',
    roles: {
      [ROLES.PLAYER]: 5,
      [ROLES.MC]: 0,
      [ROLES.DJ]: 0,
      [ROLES.VOLUNTEER]: 0,
      [ROLES.REFEREE]: 0,
      [ROLES.ASSISTANT_REFEREE]: 0,
      [ROLES.LIGHTING]: 0,
      [ROLES.COACH]: 0,
      [ROLES.STAGE_MANAGER]: 0
    }
  },
  custom: {
    name: 'Simple sondage',
    description: 'Configuration personnalis√©e',
    roles: {
      [ROLES.PLAYER]: 0,
      [ROLES.MC]: 0,
      [ROLES.DJ]: 0,
      [ROLES.VOLUNTEER]: 0,
      [ROLES.REFEREE]: 0,
      [ROLES.ASSISTANT_REFEREE]: 0,
      [ROLES.LIGHTING]: 0,
      [ROLES.COACH]: 0,
      [ROLES.STAGE_MANAGER]: 0
    }
  }
}

// Ordre d'affichage des types
export const TEMPLATE_DISPLAY_ORDER = ['cabaret', 'longform', 'match', 'deplacement', 'custom']

export async function loadEvents(seasonId) {
  const events = await firestoreService.getDocuments('seasons', seasonId, 'events')

  // Tri des √©v√©nements par date (croissant) puis par titre (alphab√©tique)
  return events.sort((a, b) => {
    const toDate = (v) => {
      if (!v) return null
      if (v instanceof Date) return v
      if (typeof v?.toDate === 'function') return v.toDate()
      const d = new Date(v)
      return isNaN(d.getTime()) ? null : d
    }

    const da = toDate(a.date)
    const db = toDate(b.date)
    const ta = da ? da.getTime() : Number.POSITIVE_INFINITY
    const tb = db ? db.getTime() : Number.POSITIVE_INFINITY
    if (ta !== tb) return ta - tb
    return (a.title || '').localeCompare(b.title || '', 'fr', { sensitivity: 'base' })
  })
}

export async function loadPlayers(seasonId) {
  const players = await firestoreService.getDocuments('seasons', seasonId, 'players')

  // Tri par order puis par nom
  return players.sort((a, b) => {
    if (a.order < b.order) return -1
    if (a.order > b.order) return 1
    return a.name.localeCompare(b.name)
  })
}



export async function addPlayer(name, seasonId, gender = 'non-specified') {
  // Validation c√¥t√© serveur
  if (!name || !name.trim()) {
    throw new Error('Le nom du joueur ne peut pas √™tre vide')
  }
  
  const trimmedName = name.trim()
  
  // Validation du genre
  const validGenders = ['male', 'female', 'non-specified']
  const playerGender = validGenders.includes(gender) ? gender : 'non-specified'
  
  // V√©rifier si un joueur avec ce nom existe d√©j√†
  const existingPlayers = await firestoreService.getDocuments('seasons', seasonId, 'players')
  const nameExists = existingPlayers.some(player => player.name === trimmedName)
  
  if (nameExists) {
    throw new Error('Un joueur avec ce nom existe d√©j√† dans cette saison')
  }
  
  const newId = await firestoreService.addDocument('seasons', { 
    name: trimmedName, 
    gender: playerGender 
  }, seasonId, 'players')
  return newId
}

export async function deletePlayer(playerId, seasonId) {
  // Lire le nom du joueur avant suppression
  const player = await firestoreService.getDocument('seasons', seasonId, 'players', playerId)
  const playerName = player?.name || null
  
  // Supprimer le joueur
  await firestoreService.deleteDocument('seasons', seasonId, 'players', playerId)
  
  // Supprimer les disponibilit√©s pour ce joueur (par nom)
  if (playerName) {
    await firestoreService.deleteDocument('seasons', seasonId, 'availability', playerName)
  }
}

export async function updatePlayer(playerId, newName, seasonId, gender = null) {
  // Validation : v√©rifier que le nouveau nom n'existe pas d√©j√†
  if (!newName || !newName.trim()) {
    throw new Error('Le nom du joueur ne peut pas √™tre vide')
  }
  
  const trimmedNewName = newName.trim()
  
  // Validation du genre
  const validGenders = ['male', 'female', 'non-specified']
  const playerGender = gender && validGenders.includes(gender) ? gender : null
  
  // V√©rifier si un autre joueur a d√©j√† ce nom
  const existingPlayers = await firestoreService.getDocuments('seasons', seasonId, 'players')
  const nameExists = existingPlayers.some(player => 
    player.name === trimmedNewName && player.id !== playerId
  )
  
  if (nameExists) {
    throw new Error('Un joueur avec ce nom existe d√©j√† dans cette saison')
  }

  // Lire l'ancien nom (si existant) avant mise √† jour
  const player = await firestoreService.getDocument('seasons', seasonId, 'players', playerId)
  const oldName = player?.name || null

  // Pr√©parer les donn√©es √† mettre √† jour
  const updateData = { name: trimmedNewName }
  if (playerGender !== null) {
    updateData.gender = playerGender
  }
  
  // Mettre √† jour les champs et pr√©server les autres champs. Cr√©e le doc s'il n'existe pas.
  await firestoreService.setDocument('seasons', seasonId, updateData, true, 'players', playerId)

  // Si le nom change, renommer les d√©pendances (availability + selections)
  if (oldName && oldName !== trimmedNewName) {

    // Renommer le document de disponibilit√©s (cl√© = nom du joueur)
    try {
      logger.info(`üîç Tentative de migration des disponibilit√©s de "${oldName}" vers "${trimmedNewName}"`)
      const oldAvailability = await firestoreService.getDocument('seasons', seasonId, 'availability', oldName)
              logger.info(`üìä Disponibilit√©s trouv√©es pour "${oldName}":`, oldAvailability)
      
      if (oldAvailability) {
        // Extraire les donn√©es sans l'ID pour la migration
        const { id, ...availabilityData } = oldAvailability
        
        // Cr√©er le nouveau document de disponibilit√©s
        await firestoreService.setDocument('seasons', seasonId, availabilityData, true, 'availability', trimmedNewName)
        logger.info(`‚úÖ Nouveau document de disponibilit√©s cr√©√© pour "${trimmedNewName}"`)
        
        // Supprimer l'ancien document
        await firestoreService.deleteDocument('seasons', seasonId, 'availability', oldName)
        logger.info(`üóëÔ∏è Ancien document de disponibilit√©s supprim√© pour "${oldName}"`)
        
        logger.info(`‚úÖ Disponibilit√©s migr√©es de "${oldName}" vers "${trimmedNewName}"`)
      } else {
        logger.info(`‚ÑπÔ∏è Aucune disponibilit√© trouv√©e pour "${oldName}"`)
      }
    } catch (error) {
              logger.warn(`‚ö†Ô∏è √âchec de la migration des disponibilit√©s pour "${oldName}":`, error.message)
      // On continue car le joueur a d√©j√† √©t√© renomm√©
    }

    // Mettre √† jour les s√©lections (nouveau format par r√¥les)
    try {
      const selections = await firestoreService.getDocuments('seasons', seasonId, 'selections')
      let updatedSelections = 0
      for (const selection of selections) {
        const { id, ...data } = selection
        if (data.roles && typeof data.roles === 'object') {
          let hasUpdates = false
          const updatedRoles = { ...data.roles }
          
          // V√©rifier chaque r√¥le pour le nom √† remplacer
          for (const [role, players] of Object.entries(updatedRoles)) {
            if (Array.isArray(players) && players.includes(oldName)) {
              updatedRoles[role] = players.map(n => n === oldName ? trimmedNewName : n)
              hasUpdates = true
            }
          }
          
          if (hasUpdates) {
            // Mise √† jour directe sans batch pour l'instant
            await firestoreService.updateDocument('seasons', seasonId, { roles: updatedRoles }, 'selections', id)
            updatedSelections++
          }
        }
      }
      if (updatedSelections > 0) {
        logger.info(`‚úÖ ${updatedSelections} s√©lection(s) mise(s) √† jour avec le nouveau nom "${trimmedNewName}"`)
      }
    } catch (error) {
              logger.warn(`‚ö†Ô∏è √âchec de la mise √† jour des s√©lections pour "${oldName}":`, error.message)
      // On continue car le joueur a d√©j√† √©t√© renomm√©
    }
  }
}

export async function loadAvailability(players, events, seasonId) {
  const availabilityDocs = await firestoreService.getDocuments('seasons', seasonId, 'availability')
  const availability = {}
  availabilityDocs.forEach(doc => {
    // firestoreService.getDocuments() retourne d√©j√† { id, ...data }
    const { id, ...data } = doc
    availability[id] = data
  })
  return availability
}

export async function loadSelections(seasonId) {
  const selectionsDocs = await firestoreService.getDocuments('seasons', seasonId, 'selections')
  const res = {}
  
  selectionsDocs.forEach(doc => {
    const { id, ...data } = doc
    
    res[id] = {
      roles: data.roles || {},
      confirmed: data.confirmed || false,
      confirmedAt: data.confirmedAt || null,
      updatedAt: data.updatedAt || null,
      playerStatuses: data.playerStatuses || {},
      confirmedByAllPlayers: data.confirmedByAllPlayers || false
    }
  })
  
  return res
}

// Fonction saveAvailability supprim√©e - toutes les disponibilit√©s passent maintenant par saveAvailabilityWithRoles

// Nouvelle fonction pour sauvegarder une disponibilit√© avec r√¥les et commentaire
export async function saveAvailabilityWithRoles({ seasonId, playerName, eventId, available, roles = [], comment = null }) {
  try {
    // R√©cup√©rer les donn√©es actuelles
    const currentDoc = await firestoreService.getDocument('seasons', seasonId, 'availability', playerName)
    const current = currentDoc || {}
    const next = { ...current }
    
    if (available === undefined) {
      delete next[eventId]
    } else {
      next[eventId] = {
        available: !!available,
        roles: Array.isArray(roles) ? roles : [],
        comment: comment || null
      }
    }
    
    await firestoreService.setDocument('seasons', seasonId, next, true, 'availability', playerName)
  } catch (error) {
    logger.error('Erreur lors de la sauvegarde de la disponibilit√© avec r√¥les:', error)
    throw error
  }
}

// Mise √† jour cibl√©e d'une disponibilit√© pour un joueur/√©v√©nement (utilis√© par magic links)
export async function setSingleAvailability({ seasonId, playerName, eventId, value }) {
  const currentDoc = await firestoreService.getDocument('seasons', seasonId, 'availability', playerName)
  const current = currentDoc || {}
  const next = { ...current }
  
  if (value === undefined) {
    delete next[eventId]
  } else {
    // Toutes les disponibilit√©s sont maintenant au nouveau format
    next[eventId] = value
  }
  await firestoreService.setDocument('seasons', seasonId, next, true, 'availability', playerName)
}

export async function saveSelection(eventId, roles, seasonId) {
  try {
    // R√©cup√©rer l'ancienne s√©lection pour comparer
    const oldSelectionDoc = await firestoreService.getDocument('seasons', seasonId, 'selections', eventId)
    
    // Extraire tous les joueurs de tous les r√¥les
    const allPlayers = Object.values(roles).flat().filter(Boolean)
    
    const oldSelection = oldSelectionDoc 
      ? Object.values(oldSelectionDoc.roles || {}).flat().filter(Boolean)
      : []
    
    // Initialiser les statuts individuels des joueurs
    const playerStatuses = {}
    allPlayers.forEach(playerName => {
      playerStatuses[playerName] = 'pending' // Tous commencent en attente de confirmation
    })
    
    const selectionData = { 
      // Nouveau format (par r√¥le)
      roles: roles,
      
      confirmed: false, // Nouvelle s√©lection = non confirm√©e
      confirmedByAllPlayers: false, // Tous les joueurs n'ont pas encore confirm√©
      playerStatuses, // Statuts individuels des joueurs
      updatedAt: new Date()
    }
    await firestoreService.setDocument('seasons', seasonId, selectionData, false, 'selections', eventId)
    
    // G√©rer les rappels automatiques
    try {
      // R√©cup√©rer les informations de l'√©v√©nement et de la saison
      const [eventData, seasonData] = await Promise.all([
        firestoreService.getDocument('seasons', seasonId, 'events', eventId),
        firestoreService.getDocument('seasons', seasonId)
      ])
      
      if (eventData && seasonData) {
          
          // Supprimer les rappels pour les joueurs d√©s√©lectionn√©s
          const removedPlayers = oldSelection.filter(name => !allPlayers.includes(name))
          
          for (const playerName of removedPlayers) {
            try {
              // R√©cup√©rer l'email du joueur depuis playerProtection
              const { getPlayerEmail } = await import('./playerProtection.js')
              const playerEmail = await getPlayerEmail(playerName, seasonId)
              if (playerEmail) {
                await removeRemindersForPlayer({
                  seasonId,
                  eventId,
                  playerEmail: playerEmail
                })
              }
            } catch (error) {
              logger.error('Erreur lors de la suppression des rappels pour', playerName, error)
            }
          }
          
          // Cr√©er les rappels pour les nouveaux joueurs s√©lectionn√©s
          const newPlayers = allPlayers.filter(name => !oldSelection.includes(name))
          
          // Cr√©er les rappels pour les nouveaux joueurs s√©lectionn√©s
          for (const playerName of newPlayers) {
            try {
              // R√©cup√©rer l'email du joueur depuis playerProtection
              const { getPlayerEmail } = await import('./playerProtection.js')
              const playerEmail = await getPlayerEmail(playerName, seasonId)
              
              if (playerEmail) {
                await createRemindersForSelection({
                  seasonId,
                  eventId,
                  playerEmail: playerEmail,
                  playerName: playerName,
                  eventTitle: eventData.title,
                  eventDate: eventData.date,
                  seasonSlug: seasonData.slug
                })
              }
            } catch (error) {
              logger.error(`‚ùå Erreur lors de la cr√©ation des rappels pour ${playerName}:`, error)
            }
          }
        }
    } catch (error) {
      logger.error('Erreur lors de la gestion des rappels automatiques:', error)
      // Ne pas faire √©chouer la sauvegarde de la s√©lection √† cause des rappels
    }
  } catch (error) {
    logger.error('‚ùå Erreur dans saveSelection:', error)
    throw error
  }
}

/**
 * Confirmer une s√©lection (la verrouille)
 */
export async function confirmSelection(eventId, seasonId) {
  try {
    // R√©cup√©rer la s√©lection actuelle pour initialiser les statuts des joueurs
    const currentSelection = await firestoreService.getDocument('seasons', seasonId, 'selections', eventId) || { roles: {} }
    
    // Initialiser les statuts individuels des joueurs si pas encore fait
    // Pr√©server les statuts "declined" existants
    const playerStatuses = currentSelection.playerStatuses || {}
    const allPlayers = Object.values(currentSelection.roles || {}).flat().filter(Boolean)
    allPlayers.forEach((playerName) => {
      if (!playerStatuses[playerName]) {
        playerStatuses[playerName] = 'pending' // En attente de confirmation
      }
      // Ne pas √©craser un statut "declined" existant
    })
    
    await firestoreService.updateDocument('seasons', seasonId, { 
      confirmed: true,
      confirmedAt: new Date(),
      confirmedByAllPlayers: false, // Initialiser √† false car les joueurs n'ont pas encore confirm√©
      playerStatuses
    }, 'selections', eventId)
  } catch (error) {
    logger.error('‚ùå Erreur dans confirmSelection:', error)
    throw error
  }
}

/**
 * Annuler la confirmation d'une s√©lection (admin uniquement)
 */
export async function unconfirmSelection(eventId, seasonId) {
  try {
    // Pr√©server TOUS les statuts des joueurs lors du d√©verrouillage
    const currentData = await firestoreService.getDocument('seasons', seasonId, 'selections', eventId)
    const preservedPlayerStatuses = {}
    
    if (currentData && currentData.playerStatuses) {
      // Pr√©server tous les statuts existants pour garder l'historique visuel
      Object.entries(currentData.playerStatuses).forEach(([playerName, status]) => {
        // Garder le statut actuel (confirmed, declined, pending)
        preservedPlayerStatuses[playerName] = status
      })
    }
    
    await firestoreService.updateDocument('seasons', seasonId, { 
      confirmed: false,
      confirmedAt: null,
      playerStatuses: preservedPlayerStatuses, // Pr√©server tous les statuts
      confirmedByAllPlayers: false
    }, 'selections', eventId)
  } catch (error) {
    logger.error('‚ùå Erreur dans unconfirmSelection:', error)
    throw error
  }
}

/**
 * Supprimer compl√®tement une s√©lection (remet le statut √† "Nouveau")
 * @param {string} eventId - ID de l'√©v√©nement
 * @param {string} seasonId - ID de la saison (optionnel)
 */
export async function deleteSelection(eventId, seasonId) {
          logger.info('üóëÔ∏è deleteSelection appel√©:', { eventId, seasonId })
  
  try {
    // Supprimer compl√®tement le document de s√©lection
    await firestoreService.deleteDocument('seasons', seasonId, 'selections', eventId)
    
    logger.info('‚úÖ S√©lection supprim√©e avec succ√®s')
  } catch (error) {
    logger.error('‚ùå Erreur dans deleteSelection:', error)
    throw error
  }
}

export async function deleteEvent(eventId, seasonId) {
  logger.info('Suppression de l\'√©v√©nement', { eventId })
  
  try {
    // Supprimer l'√©v√©nement
    logger.debug('Suppression de l\'√©v√©nement dans Firestore')
    await firestoreService.deleteDocument('seasons', seasonId, 'events', eventId)
    
    // Supprimer la s√©lection associ√©e
    logger.debug('Suppression de la s√©lection associ√©e')
    await firestoreService.deleteDocument('seasons', seasonId, 'selections', eventId)
    
    // Supprimer les disponibilit√©s pour cet √©v√©nement
    logger.debug('Suppression des disponibilit√©s')
    const allAvailability = await firestoreService.getDocuments('seasons', seasonId, 'availability')
    
    // Cr√©er un batch pour supprimer les disponibilit√©s
    const batch = firestoreService.createBatch()
    
    allAvailability.forEach(availabilityDoc => {
      const availabilityData = availabilityDoc
      if (availabilityData[eventId] !== undefined) {
        logger.debug('Mise √† jour de la disponibilit√© pour un joueur')
        const updatedData = { ...availabilityData }
        delete updatedData[eventId]
        batch.update('seasons', seasonId, updatedData, 'availability', availabilityDoc.id)
      }
    })
    
    await batch.commit()
    logger.info('Op√©rations de suppression termin√©es avec succ√®s')
  } catch (error) {
    logger.error('Erreur lors de la suppression', error)
    throw error
  }
}

export async function saveEvent(eventData, seasonId) {
  // Ajouter la structure des r√¥les par d√©faut si elle n'existe pas
  const eventWithRoles = {
    ...eventData,
    roles: eventData.roles || {
      [ROLES.PLAYER]: eventData.playerCount || 5,
      [ROLES.VOLUNTEER]: 0,
      [ROLES.MC]: 1,
      [ROLES.DJ]: 1,
      [ROLES.REFEREE]: 0,
      [ROLES.ASSISTANT_REFEREE]: 0,
      [ROLES.LIGHTING]: 0,
      [ROLES.COACH]: 0,
      [ROLES.STAGE_MANAGER]: 0
    }
  }
  
  const eventId = await firestoreService.addDocument('seasons', eventWithRoles, seasonId, 'events')
  return eventId
}

export async function updateEvent(eventId, eventData, seasonId) {
  // Utiliser merge pour ne pas √©craser des champs existants (ex: archived)
  await firestoreService.setDocument('seasons', seasonId, eventData, true, 'events', eventId)
}

// Mise √† jour de l'√©tat d'archivage d'un √©v√©nement
export async function setEventArchived(eventId, archived, seasonId) {
  await firestoreService.updateDocument('seasons', seasonId, { archived: !!archived }, 'events', eventId)
}

/**
 * Mettre √† jour le statut individuel d'un joueur dans une s√©lection
 * @param {string} eventId - ID de l'√©v√©nement
 * @param {string} playerName - Nom du joueur
 * @param {string} status - Statut: 'pending', 'confirmed', 'declined'
 * @param {string} seasonId - ID de la saison (optionnel)
 */
export async function updatePlayerSelectionStatus(eventId, playerName, status, seasonId) {
  logger.info('üîÑ updatePlayerSelectionStatus appel√©:', { eventId, playerName, status, seasonId })
  
  try {
    // R√©cup√©rer la s√©lection actuelle pour v√©rifier l'√©tat global
    const selectionDoc = await firestoreService.getDocument('seasons', seasonId, 'selections', eventId)
    if (!selectionDoc) {
      throw new Error('S√©lection non trouv√©e')
    }
    
    const { playerStatuses = {} } = selectionDoc
    
    // Mettre √† jour le statut du joueur
    const updatedPlayerStatuses = { ...playerStatuses, [playerName]: status }
    
    // R√©cup√©rer tous les joueurs de la s√©lection (tous r√¥les confondus)
    const allPlayers = getAllPlayersFromSelection(selectionDoc)
    
    // V√©rifier si tous les joueurs ont maintenant confirm√©
    const allPlayersConfirmed = allPlayers.every(playerName => 
      updatedPlayerStatuses[playerName] === 'confirmed'
    )
    
    // Mettre √† jour le statut du joueur ET l'√©tat global de la s√©lection
    await firestoreService.updateDocument('seasons', seasonId, {
      [`playerStatuses.${playerName}`]: status,
      confirmedByAllPlayers: allPlayersConfirmed
    }, 'selections', eventId)
    
    return { confirmedByAllPlayers: allPlayersConfirmed }
  } catch (error) {
    logger.error('‚ùå Erreur dans updatePlayerSelectionStatus:', error)
    throw error
  }
}

/**
 * V√©rifier si tous les joueurs d'une s√©lection ont confirm√© leur participation
 * @param {string} eventId - ID de l'√©v√©nement
 * @param {string} seasonId - ID de la saison
 * @returns {Promise<boolean>} - true si tous ont confirm√©
 */
export async function isAllPlayersConfirmed(eventId, seasonId) {
  try {
    const selectionDoc = await firestoreService.getDocument('seasons', seasonId, 'selections', eventId)
    if (!selectionDoc) {
      return false
    }
    
    const { confirmedByAllPlayers = false } = selectionDoc
    
    // Utiliser le champ pr√©-calcul√© pour de meilleures performances
    return confirmedByAllPlayers
  } catch (error) {
    logger.error('‚ùå Erreur dans isAllPlayersConfirmed:', error)
    return false
  }
}

/**
 * Fonctions helper pour la nouvelle structure multi-r√¥les
 */

/**
 * Extraire tous les joueurs d'une s√©lection (tous r√¥les confondus)
 * @param {Object} selection - Objet de s√©lection
 * @returns {Array} - Array de noms de joueurs
 */
export function getAllPlayersFromSelection(selection) {
  if (!selection) return []
  
  if (selection.roles && typeof selection.roles === 'object') {
    // Nouveau format : extraire de tous les r√¥les
    return Object.values(selection.roles).flat().filter(Boolean)
  }
  
  // Aucun format valide trouv√©
  return []
}

/**
 * Extraire les joueurs d'un r√¥le sp√©cifique
 * @param {Object} selection - Objet de s√©lection
 * @param {string} role - R√¥le recherch√©
 * @returns {Array} - Array de noms de joueurs pour ce r√¥le
 */
export function getPlayersForRole(selection, role) {
  if (!selection || !selection.roles) return []
  
  return selection.roles[role] || []
}

/**
 * V√©rifier si un joueur est s√©lectionn√© pour un r√¥le sp√©cifique
 * @param {Object} selection - Objet de s√©lection
 * @param {string} playerName - Nom du joueur
 * @param {string} role - R√¥le recherch√©
 * @returns {boolean} - true si le joueur est s√©lectionn√© pour ce r√¥le
 */
export function isPlayerSelectedForRole(selection, playerName, role) {
  if (!selection || !selection.roles) return false
  
  const rolePlayers = selection.roles[role] || []
  return rolePlayers.includes(playerName)
}

/**
 * Obtenir le r√¥le d'un joueur dans une s√©lection
 * @param {Object} selection - Objet de s√©lection
 * @param {string} playerName - Nom du joueur
 * @returns {string|null} - R√¥le du joueur ou null si non trouv√©
 */
export function getPlayerRole(selection, playerName) {
  if (!selection || !selection.roles) return null
  
  for (const [role, players] of Object.entries(selection.roles)) {
    if (players.includes(playerName)) {
      return role
    }
  }
  
  return null
}
