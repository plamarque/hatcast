/**
 * Service de gestion des permissions HatCast
 * G√®re les permissions Super Admin (Cloud Functions) et Admin de saison (Firestore)
 */

import { getAuth } from 'firebase/auth';
import logger from './logger.js';
import firestoreService from './firestoreService.js';
import { callCloudFunction } from './firebase.js';

class PermissionService {
  constructor() {
    this.auth = null;
    this.permissionStatus = {
      seasonPermissions: new Map(), // seasonId -> { admins: [], users: [], timestamp }
      checkValidity: 5 * 60 * 1000 // 5 minutes
    };
    
    // Cache pour Super Admin (unifi√© avec les permissions de saison)
    this.superAdminCache = null;
    this.superAdminCacheTimestamp = null;
    this.isInitialized = false;
  }

  async initialize() {
    if (this.isInitialized) return this;
    
    try {
      // Attendre que Firebase soit initialis√©
      let attempts = 0;
      const maxAttempts = 10;
      
      while (attempts < maxAttempts) {
        try {
          this.auth = getAuth();
          if (this.auth) {
            break;
          }
        } catch (error) {
          // Firebase pas encore initialis√©, attendre
          await new Promise(resolve => setTimeout(resolve, 500));
          attempts++;
        }
      }
      
      if (!this.auth) {
        throw new Error('Impossible d\'initialiser Firebase Auth apr√®s plusieurs tentatives');
      }
      
      this.isInitialized = true;
      logger.info('‚úÖ RoleService initialis√© avec succ√®s');
      return this;
    } catch (error) {
      logger.error('‚ùå Erreur lors de l\'initialisation de PermissionService:', error);
      throw error;
    }
  }


  /**
   * V√©rifie si l'utilisateur actuel est Super Admin
   * G√®re directement le cache et la v√©rification Cloud Function
   */
  async isSuperAdmin(force = false) {
    try {
      const user = this.auth?.currentUser;
      
      if (!user?.email) {
        return false;
      }
      
      const now = Date.now();
      
      // V√©rifier le cache si pas de force refresh
      if (!force && this.superAdminCache !== null && this.superAdminCacheTimestamp) {
        if (now - this.superAdminCacheTimestamp < this.permissionStatus.checkValidity) {
          logger.debug('üîê Statut Super Admin r√©cup√©r√© du cache');
          return this.superAdminCache;
        }
      }
      
      logger.info('üîê V√©rification du statut Super Admin via Cloud Functions...');
      console.log('üîç permissionService: Appel √† callCloudFunction checkSuperAdminStatus');
      
      // Appeler la Cloud Function pour v√©rifier le statut Super Admin
      const result = await callCloudFunction('checkSuperAdminStatus');
      console.log('üîç permissionService: R√©sultat de la Cloud Function:', result);
      const isAdmin = result.isSuperAdmin || false;
      
      // Mettre en cache
      this.superAdminCache = isAdmin;
      this.superAdminCacheTimestamp = now;
      
      logger.info(`üîê Statut Super Admin: ${isAdmin ? '‚úÖ OUI' : '‚ùå NON'}`);
      return isAdmin;
      
    } catch (error) {
      logger.error('‚ùå Erreur lors de la v√©rification Super Admin:', error);
      
      // Fallback gracieux vers impropick@gmail.com en cas d'erreur
      const user = this.auth?.currentUser;
      const isFallback = user?.email === 'impropick@gmail.com';
      
      if (isFallback) {
        logger.warn('üîê Utilisation du fallback de d√©veloppement (impropick@gmail.com)');
        this.superAdminCache = true;
        this.superAdminCacheTimestamp = Date.now();
        return true;
      }
      
      // Pour tous les autres utilisateurs, retourner false en cas d'erreur
      this.superAdminCache = false;
      this.superAdminCacheTimestamp = Date.now();
      return false;
    }
  }

  /**
   * V√©rifie si l'utilisateur actuel est Admin de saison pour une saison donn√©e
   */
  async isSeasonAdmin(seasonId, force = false) {
    try {
      // Super Admin a toujours acc√®s √† tout
      if (await this.isSuperAdmin(force)) {
        logger.info('üîê Super Admin d√©tect√© - acc√®s accord√© √† toutes les saisons');
        return true;
      }

      logger.info(`üîê V√©rification du statut Admin de saison ${seasonId} via Firestore...`);
      logger.debug('üîê isSeasonAdmin - D√©but de la v√©rification');
      logger.debug('üîê - Utilisateur actuel:', this.auth?.currentUser?.email || 'Non connect√©');
      logger.debug('üîê - Saison:', seasonId);
      
      // Utiliser la m√©thode Firestore directe (qui g√®re d√©j√† le cache seasonRoles)
      const userEmail = this.auth?.currentUser?.email;
      if (!userEmail) {
        logger.warn('üîê Pas d\'email utilisateur disponible');
        return false;
      }
      
      const isAdmin = await this.isUserSeasonAdmin(seasonId, userEmail);
      
      logger.info(`üîê Statut Admin de saison ${seasonId}: ${isAdmin ? '‚úÖ OUI' : '‚ùå NON'}`);
      logger.debug('üîê - Statut Admin de saison final:', isAdmin);
      
      return isAdmin;
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la v√©rification Admin de saison ${seasonId}:`, error);
      return false;
    }
  }

  /**
   * V√©rifie si l'utilisateur peut √©diter les √©v√©nements d'une saison
   * (Super Admin ou Admin de saison)
   */
  async canEditEvents(seasonId, force = false) {
    try {
      // Super Admin peut toujours √©diter
      if (await this.isSuperAdmin(force)) {
        return true;
      }
      
      // V√©rifier si Admin de saison
      return await this.isSeasonAdmin(seasonId, force);
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la v√©rification des permissions d'√©dition pour ${seasonId}:`, error);
      return false;
    }
  }

  /**
   * Force la v√©rification de toutes les permissions
   */
  async refreshAllPermissions() {
    try {
      // Nettoyer le cache des permissions de saison
      this.invalidateAllCache();
      
      // Forcer la v√©rification Super Admin
      await this.isSuperAdmin(true);
      
      logger.info('üîê Cache des permissions compl√®tement vid√© et rafra√Æchi');
    } catch (error) {
      logger.error('‚ùå Erreur lors du rafra√Æchissement des permissions:', error);
    }
  }


  // Les m√©thodes de gestion des r√¥les de saison sont maintenant dans la section Firestore ci-dessous

  /**
   * M√©thodes de compatibilit√© avec l'ancien adminService
   */
  async checkAdminStatus() {
    // Pour compatibilit√© avec l'ancien code
    return { isAdmin: await this.isSuperAdmin() };
  }

  async isAdmin() {
    // Pour compatibilit√© avec l'ancien code
    return await this.isSuperAdmin();
  }

  async refreshAdminStatus() {
    // Pour compatibilit√© avec l'ancien code
    return await this.refreshAllPermissions();
  }

  async refreshAllRoles() {
    // Pour compatibilit√© avec l'ancien code
    return await this.refreshAllPermissions();
  }

  // ========================================
  // GESTION DES PERMISSIONS DE SAISON (FIRESTORE)
  // ========================================

  /**
   * R√©cup√®re les permissions d'une saison depuis Firestore
   */
  async getSeasonRoles(seasonId, force = false) {
    try {
      const now = Date.now();
      
      // V√©rifier le cache
      if (!force && this.permissionStatus.seasonPermissions.has(seasonId)) {
        const cached = this.permissionStatus.seasonPermissions.get(seasonId);
        if (cached.timestamp && (now - cached.timestamp) < this.permissionStatus.checkValidity) {
          logger.debug(`üîê Permissions de saison ${seasonId} r√©cup√©r√©s du cache`);
          return cached;
        }
      }

      logger.info(`üîê R√©cup√©ration des permissions de saison ${seasonId} depuis Firestore`);
      
      const seasonDoc = await firestoreService.getDocument('seasons', seasonId);
      console.log('üîç DEBUG getSeasonRoles: seasonDoc re√ßu:', seasonDoc);
      console.log('üîç DEBUG getSeasonRoles: seasonDoc.roles:', seasonDoc?.roles);
      const roles = seasonDoc?.roles || { admins: [], users: [] };
      console.log('üîç DEBUG getSeasonRoles: roles final:', roles);
      
      // Ajouter timestamp pour le cache
      const rolesWithTimestamp = {
        ...roles,
        timestamp: now
      };
      
      this.permissionStatus.seasonPermissions.set(seasonId, rolesWithTimestamp);
      
      logger.info(`üîê Permissions de saison ${seasonId} charg√©s:`, {
        admins: roles.admins?.length || 0,
        users: roles.users?.length || 0
      });
      
      return rolesWithTimestamp;
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la r√©cup√©ration des permissions de saison ${seasonId}:`, error);
      return { admins: [], users: [], timestamp: Date.now() };
    }
  }

  /**
   * V√©rifie si un utilisateur est admin d'une saison (Firestore direct)
   */
  async isUserSeasonAdmin(seasonId, userEmail) {
    try {
      const roles = await this.getSeasonRoles(seasonId);
      return roles.admins.includes(userEmail);
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la v√©rification du r√¥le admin pour ${userEmail} dans ${seasonId}:`, error);
      return false;
    }
  }

  /**
   * V√©rifie si un utilisateur est user d'une saison
   */
  async isUserSeasonUser(seasonId, userEmail) {
    try {
      const roles = await this.getSeasonRoles(seasonId);
      return roles.users.includes(userEmail);
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la v√©rification du r√¥le user pour ${userEmail} dans ${seasonId}:`, error);
      return false;
    }
  }

  /**
   * Ajoute un admin √† une saison (Firestore direct)
   */
  async addSeasonAdmin(seasonId, userEmail, grantedBy) {
    try {
      logger.info(`üîê Ajout de l'admin ${userEmail} √† la saison ${seasonId} par ${grantedBy}`);
      
      const roles = await this.getSeasonRoles(seasonId, true); // Force refresh
      
      if (!roles.admins.includes(userEmail)) {
        roles.admins.push(userEmail);
        
        // V√©rifier si le document existe, sinon le cr√©er
        const seasonDoc = await firestoreService.getDocument('seasons', seasonId);
        if (!seasonDoc) {
          logger.info(`üîê Cr√©ation du document seasons/${seasonId}`);
          await firestoreService.setDocument('seasons', seasonId, {
            roles: {
              admins: roles.admins,
              users: roles.users
            }
          });
        } else {
          // Mettre √† jour le document existant
          await firestoreService.updateDocument('seasons', seasonId, {
            'roles.admins': roles.admins
          });
        }
        
        // Invalider le cache
        this.permissionStatus.seasonPermissions.delete(seasonId);
        
        logger.info(`‚úÖ Admin ${userEmail} ajout√© √† la saison ${seasonId}`);
      } else {
        logger.info(`‚ÑπÔ∏è ${userEmail} est d√©j√† admin de la saison ${seasonId}`);
      }
    } catch (error) {
      logger.error(`‚ùå Erreur lors de l'ajout de l'admin ${userEmail} √† la saison ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Retire un admin d'une saison (Firestore direct)
   */
  async removeSeasonAdmin(seasonId, userEmail, revokedBy) {
    try {
      logger.info(`üîê Retrait de l'admin ${userEmail} de la saison ${seasonId} par ${revokedBy}`);
      
      const roles = await this.getSeasonRoles(seasonId, true); // Force refresh
      
      const adminIndex = roles.admins.indexOf(userEmail);
      if (adminIndex !== -1) {
        roles.admins.splice(adminIndex, 1);
        
        // Mettre √† jour Firestore
        await firestoreService.updateDocument('seasons', seasonId, {
          'roles.admins': roles.admins
        });
        
        // Invalider le cache
        this.permissionStatus.seasonPermissions.delete(seasonId);
        
        logger.info(`‚úÖ Admin ${userEmail} retir√© de la saison ${seasonId}`);
      } else {
        logger.info(`‚ÑπÔ∏è ${userEmail} n'√©tait pas admin de la saison ${seasonId}`);
      }
    } catch (error) {
      logger.error(`‚ùå Erreur lors du retrait de l'admin ${userEmail} de la saison ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Ajoute un user √† une saison (Firestore direct)
   */
  async addSeasonUser(seasonId, userEmail, grantedBy) {
    try {
      logger.info(`üîê Ajout de l'utilisateur ${userEmail} √† la saison ${seasonId} par ${grantedBy}`);
      
      const roles = await this.getSeasonRoles(seasonId, true); // Force refresh
      
      if (!roles.users.includes(userEmail)) {
        roles.users.push(userEmail);
        
        // V√©rifier si le document existe, sinon le cr√©er
        const seasonDoc = await firestoreService.getDocument('seasons', seasonId);
        if (!seasonDoc) {
          logger.info(`üîê Cr√©ation du document seasons/${seasonId}`);
          await firestoreService.setDocument('seasons', seasonId, {
            roles: {
              admins: roles.admins,
              users: roles.users
            }
          });
        } else {
          // Mettre √† jour le document existant
          await firestoreService.updateDocument('seasons', seasonId, {
            'roles.users': roles.users
          });
        }
        
        // Invalider le cache
        this.permissionStatus.seasonPermissions.delete(seasonId);
        
        logger.info(`‚úÖ Utilisateur ${userEmail} ajout√© √† la saison ${seasonId}`);
      } else {
        logger.info(`‚ÑπÔ∏è ${userEmail} est d√©j√† utilisateur de la saison ${seasonId}`);
      }
    } catch (error) {
      logger.error(`‚ùå Erreur lors de l'ajout de l'utilisateur ${userEmail} √† la saison ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Retire un user d'une saison (Firestore direct)
   */
  async removeSeasonUser(seasonId, userEmail, revokedBy) {
    try {
      logger.info(`üîê Retrait de l'utilisateur ${userEmail} de la saison ${seasonId} par ${revokedBy}`);
      
      const roles = await this.getSeasonRoles(seasonId, true); // Force refresh
      
      const userIndex = roles.users.indexOf(userEmail);
      if (userIndex !== -1) {
        roles.users.splice(userIndex, 1);
        
        // Mettre √† jour Firestore
        await firestoreService.updateDocument('seasons', seasonId, {
          'roles.users': roles.users
        });
        
        // Invalider le cache
        this.permissionStatus.seasonPermissions.delete(seasonId);
        
        logger.info(`‚úÖ Utilisateur ${userEmail} retir√© de la saison ${seasonId}`);
      } else {
        logger.info(`‚ÑπÔ∏è ${userEmail} n'√©tait pas utilisateur de la saison ${seasonId}`);
      }
    } catch (error) {
      logger.error(`‚ùå Erreur lors du retrait de l'utilisateur ${userEmail} de la saison ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Liste les r√¥les d'une saison
   */
  async listSeasonRoles(seasonId) {
    try {
      const roles = await this.getSeasonRoles(seasonId);
      return {
        admins: roles.admins || [],
        users: roles.users || []
      };
    } catch (error) {
      logger.error(`‚ùå Erreur lors de la r√©cup√©ration des permissions de saison ${seasonId}:`, error);
      return { admins: [], users: [] };
    }
  }

  /**
   * Invalide le cache des r√¥les de saison pour une saison sp√©cifique
   */
  invalidateSeasonCache(seasonId) {
    this.permissionStatus.seasonPermissions.delete(seasonId);
    logger.debug(`üîê Cache invalid√© pour la saison ${seasonId}`);
  }

  /**
   * DEBUG: Fonction temporaire pour cr√©er le document seasons manquant
   */
  async debugCreateSeasonDocument(seasonId, adminEmail) {
    try {
      console.log(`üîß DEBUG: Cr√©ation du document seasons/${seasonId} avec ${adminEmail} comme admin`);
      
      const seasonDoc = {
        roles: {
          admins: [adminEmail],
          users: []
        }
      };
      
      await firestoreService.setDocument('seasons', seasonId, seasonDoc);
      console.log(`‚úÖ DEBUG: Document seasons/${seasonId} cr√©√© avec succ√®s`);
      
      // Invalider le cache pour forcer le rechargement
      this.invalidateSeasonCache(seasonId);
      
      return true;
    } catch (error) {
      console.error(`‚ùå DEBUG: Erreur lors de la cr√©ation du document seasons/${seasonId}:`, error);
      return false;
    }
  }

  /**
   * Initialise les r√¥les d'une nouvelle saison avec le cr√©ateur comme admin
   */
  async initializeSeasonRoles(seasonId, creatorEmail) {
    try {
      logger.info(`üîê Initialisation des r√¥les pour la saison ${seasonId} avec ${creatorEmail} comme admin`);
      
      const initialRoles = {
        admins: [creatorEmail],
        users: []
      };
      
      await firestoreService.setDocument('seasons', seasonId, {
        roles: initialRoles
      });
      
      // Invalider le cache pour cette saison
      this.invalidateSeasonCache(seasonId);
      
      logger.info(`‚úÖ R√¥les initialis√©s pour la saison ${seasonId}`);
    } catch (error) {
      logger.error(`‚ùå Erreur lors de l'initialisation des r√¥les pour la saison ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Invalide le cache Super Admin
   */
  invalidateSuperAdminCache() {
    this.superAdminCache = null;
    this.superAdminCacheTimestamp = null;
    logger.debug('üîê Cache Super Admin invalid√©');
  }

  /**
   * Invalide tout le cache des permissions
   */
  invalidateAllCache() {
    this.permissionStatus.seasonPermissions.clear();
    this.invalidateSuperAdminCache();
    logger.debug('üîê Cache complet invalid√©');
  }
}

// Instance singleton
const permissionService = new PermissionService();

// DEBUG: Exposer la fonction de debug globalement
window.debugPermissionService = {
  createSeasonDocument: (seasonId, adminEmail) => permissionService.debugCreateSeasonDocument(seasonId, adminEmail),
  clearCache: () => permissionService.invalidateAllCache(),
  getStatus: () => ({
    isInitialized: permissionService.isInitialized,
    seasonPermissions: Object.fromEntries(permissionService.permissionStatus.seasonPermissions),
    superAdminCache: permissionService.superAdminCache
  })
};

export default permissionService;
