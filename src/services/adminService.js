/**
 * Service de gestion admin c√¥t√© frontend HatCast
 * G√®re la v√©rification des permissions admin et l'authentification
 */

import { getAuth } from 'firebase/auth';
import logger from './logger.js';

class AdminService {
  constructor() {
    this.auth = null;
    this.baseUrl = this.getBaseUrl();
    this.adminStatus = null;
    this.lastCheck = null;
    this.checkValidity = 5 * 60 * 1000; // 5 minutes
    this.isInitialized = false;
  }

  async initialize() {
    if (this.isInitialized) return this;
    
    try {
      // Attendre que Firebase soit initialis√©
      let attempts = 0;
      const maxAttempts = 10;
      
      while (attempts < maxAttempts) {
        try {
          this.auth = getAuth();
          if (this.auth) {
            break;
          }
        } catch (error) {
          // Firebase pas encore initialis√©, attendre
          await new Promise(resolve => setTimeout(resolve, 500));
          attempts++;
        }
      }
      
      if (!this.auth) {
        throw new Error('Impossible d\'initialiser Firebase Auth apr√®s plusieurs tentatives');
      }
      
      this.isInitialized = true;
      logger.info('‚úÖ AdminService initialis√© avec succ√®s');
      return this;
    } catch (error) {
      logger.error('‚ùå Erreur lors de l\'initialisation d\'AdminService:', error);
      throw error;
    }
  }

  /**
   * D√©termine l'URL de base des fonctions Firebase
   */
  getBaseUrl() {
    const hostname = window.location.hostname;
    
    if (hostname.includes('staging') || hostname.includes('hatcast-staging')) {
      return 'https://us-central1-impro-selector.cloudfunctions.net';
    } else if (hostname.includes('localhost') || hostname.includes('192.168.1.134')) {
      // En d√©veloppement local, utiliser les vraies functions de production (comme avant)
      return 'https://us-central1-impro-selector.cloudfunctions.net';
    } else {
      return 'https://us-central1-impro-selector.cloudfunctions.net';
    }
  }

  /**
   * R√©cup√®re le token d'authentification Firebase
   */
  async getAuthToken() {
    try {
      if (!this.isInitialized || !this.auth) {
        await this.initialize();
      }
      
      const user = this.auth.currentUser;
      if (!user) {
        throw new Error('Utilisateur non connect√©');
      }
      
      const token = await user.getIdToken();
      return token;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration du token:', error);
      throw new Error('Impossible de r√©cup√©rer le token d\'authentification');
    }
  }

  /**
   * Appelle une fonction Firebase avec authentification
   */
  async callFunction(functionName, options = {}) {
    try {
      const token = await this.getAuthToken();
      const url = `${this.baseUrl}/${functionName}`;
      
            logger.debug(`üîê callFunction - Appel √† ${functionName}`);
      logger.debug(`üîê - URL: ${url}`);
      logger.debug(`üîê - Token pr√©sent: ${!!token}`);
      logger.debug(`üîê - Origin: ${window.location.origin}`);
      
      const response = await fetch(url, {
        method: options.method || 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
          ...options.headers
        },
        body: options.body ? JSON.stringify(options.body) : undefined,
        ...options
      });

      logger.debug(`üîê - Status de la r√©ponse: ${response.status}`);
      logger.debug(`üîê - Headers de la r√©ponse:`, Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        logger.error(`‚ùå Erreur HTTP ${response.status}:`, errorData);
        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
      }

      const result = await response.json();
      logger.debug(`üîê - R√©ponse re√ßue:`, result);
      return result;
    } catch (error) {
      logger.error(`‚ùå Erreur lors de l'appel √† ${functionName}:`, error);
      logger.error(`‚ùå DEBUG - Type d'erreur:`, error.name);
      logger.error(`‚ùå DEBUG - Message d'erreur:`, error.message);
      throw error;
    }
  }

  /**
   * R√©cup√®re les secrets Firebase (admin uniquement)
   */
  async getSecrets() {
    try {
      logger.info('üîê Demande de r√©cup√©ration des secrets Firebase...');
      
      const result = await this.callFunction('getAllFirebaseSecrets');
      
      if (result.success) {
        logger.info('‚úÖ Secrets Firebase r√©cup√©r√©s avec succ√®s');
        return result.data;
      } else {
        throw new Error(result.message || 'Erreur lors de la r√©cup√©ration des secrets');
      }
    } catch (error) {
      logger.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des secrets Firebase:', error);
      return {};
    }
  }

  /**
   * V√©rifie le statut admin de l'utilisateur actuel
   */
  async checkAdminStatus(force = false) {
    try {
      const now = Date.now();
      
      // V√©rifier si on a un statut valide en cache
      if (!force && this.adminStatus && this.lastCheck && (now - this.lastCheck) < this.checkValidity) {
        logger.info('üîê Statut admin r√©cup√©r√© du cache');
        return this.adminStatus;
      }

      logger.info('üîê V√©rification du statut admin...');
      logger.debug('üîê checkAdminStatus - D√©but de la v√©rification');
      logger.debug('üîê - Utilisateur actuel:', this.auth?.currentUser?.email || 'Non connect√©');
      logger.debug('üîê - URL de base:', this.baseUrl);
      
      const result = await this.callFunction('checkAdminStatus');
      
      logger.debug('üîê - R√©ponse de la Cloud Function:', result);
      
      this.adminStatus = result.isAdmin;
      this.lastCheck = now;
      
      logger.info(`üîê Statut admin: ${this.adminStatus ? '‚úÖ OUI' : '‚ùå NON'}`);
      logger.debug('üîê - Statut admin final:', this.adminStatus);
      
      return this.adminStatus;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la v√©rification admin:', error);
      logger.error('‚ùå DEBUG - D√©tails de l\'erreur:', {
        message: error.message,
        stack: error.stack,
        user: this.auth?.currentUser?.email || 'Non connect√©',
        baseUrl: this.baseUrl
      });
      this.adminStatus = false;
      this.lastCheck = now;
      return false;
    }
  }

  /**
   * V√©rifie si l'utilisateur actuel est admin
   */
  async isAdmin() {
    return await this.checkAdminStatus();
  }

  /**
   * Force la v√©rification du statut admin
   */
  async refreshAdminStatus() {
    return await this.checkAdminStatus(true);
  }

  /**
   * Dump les informations d'environnement (admin uniquement)
   */
  async dumpEnvironment() {
    try {
      logger.info('üîç Demande de dump environnement...');
      
      const result = await this.callFunction('dumpEnvironment');
      
      if (result.success) {
        logger.info('‚úÖ Dump environnement r√©ussi:', result.data);
        return result.data;
      } else {
        throw new Error(result.message || 'Erreur lors du dump');
      }
    } catch (error) {
      logger.error('‚ùå Erreur lors du dump environnement:', error);
      throw error;
    }
  }

  /**
   * V√©rifie la configuration admin (admin uniquement)
   */
  async checkAdminConfig() {
    try {
      logger.info('üîß V√©rification de la configuration admin...');
      
      const result = await this.callFunction('checkAdminConfig');
      
      if (result.success) {
        logger.info('‚úÖ Configuration admin r√©cup√©r√©e:', result.data);
        return result.data;
      } else {
        throw new Error(result.message || 'Erreur lors de la v√©rification');
      }
    } catch (error) {
      logger.error('‚ùå Erreur lors de la v√©rification config admin:', error);
      throw error;
    }
  }

  /**
   * Test d'acc√®s admin (admin uniquement)
   */
  async testAdminAccess() {
    try {
      logger.info('üß™ Test d\'acc√®s admin...');
      
      const result = await this.callFunction('testAdminAccess');
      
      if (result.success) {
        logger.info('‚úÖ Test d\'acc√®s admin r√©ussi:', result.message);
        return result;
      } else {
        throw new Error(result.message || 'Erreur lors du test');
      }
    } catch (error) {
      logger.error('‚ùå Erreur lors du test admin:', error);
      throw error;
    }
  }

  /**
   * Nettoie le cache du statut admin
   */
  clearCache() {
    this.adminStatus = null;
    this.lastCheck = null;
    logger.info('üßπ Cache admin nettoy√©');
  }

  /**
   * Retourne les informations de debug
   */
  getDebugInfo() {
    return {
      adminStatus: this.adminStatus,
      lastCheck: this.lastCheck,
      checkValidity: this.checkValidity,
      baseUrl: this.baseUrl,
      user: this.auth?.currentUser?.email || 'Non connect√©',
      isInitialized: this.isInitialized
    };
  }
}

// Instance singleton
const adminService = new AdminService();

// Initialiser le service de mani√®re asynchrone
adminService.initialize().catch(error => {
  logger.error('‚ùå Erreur lors de l\'initialisation d\'AdminService:', error);
});

export default adminService;
