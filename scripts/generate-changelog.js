#!/usr/bin/env node

const { OpenAI } = require('openai');

// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

async function generateUserFocusedChangelog(technicalJson, version) {
  try {
    // Parse the technical JSON
    let technicalData;
    try {
      technicalData = JSON.parse(technicalJson);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON technique:', parseError.message);
      return null;
    }

    const date = technicalData.date || new Date().toISOString().split('T')[0];

    const prompt = `Je vais te donner un JSON technique de changelog en anglais et je veux que tu le transformes en JSON fran√ßais orient√© utilisateur en suivant ces guidelines :

GUIDELINES POUR LA TRANSFORMATION :
1. **Orientation utilisateur** : Focus sur la valeur utilisateur, pas les d√©tails techniques
2. **Langage accessible** : √âviter le jargon technique (PWA ‚Üí appli mobile, z-index ‚Üí superposition, etc.)
3. **Termes sp√©cialis√©s** : Conserver les termes de l'impro (Long Form, MC, DJ, etc.)
4. **Langage inclusif** : Utiliser f√©minin/masculin et inclusif
5. **Filtrage automatique** : IGNORER compl√®tement les commits de debug, cleanup, test, et autres changements techniques internes
6. **Synth√®se** : Tu peux supprimer des lignes non pertinentes et regrouper des changements similaires
7. **Reformulation** : Reformuler en fran√ßais pour que ce soit accessible aux utilisateurs finaux
8. **Emojis** : Conserver ‚ú® üêõ üîß üìù üé®
9. **Structure** : Respecter exactement la structure JSON fournie

STRUCTURE JSON √Ä RESPECTER :
{
  "version": "${version}",
  "date": "${date}",
  "changes": [
    "‚ú® Description de la nouvelle fonctionnalit√©",
    "üêõ Description de la correction de bug",
    "üîß Description de l'am√©lioration"
  ]
}

JSON TECHNIQUE √Ä TRANSFORMER :
${JSON.stringify(technicalData, null, 2)}

R√©ponds UNIQUEMENT avec le JSON transform√©, sans explication ni texte suppl√©mentaire.`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // Mod√®le rapide et √©conomique
      messages: [
        {
          role: "system",
          content: "Tu es un expert en r√©daction de changelogs orient√©s utilisateur. Tu g√©n√®res des JSON de changelogs en fran√ßais en les rendant accessibles et centr√©s sur la valeur utilisateur. Tu r√©ponds UNIQUEMENT avec du JSON valide."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3, // Faible temp√©rature pour plus de coh√©rence
      max_tokens: 1000
    });

    const jsonResponse = response.choices[0].message.content.trim();
    
    // Validate JSON
    try {
      const parsed = JSON.parse(jsonResponse);
      if (parsed.version && parsed.date && Array.isArray(parsed.changes)) {
        return jsonResponse;
      } else {
        console.error('‚ùå JSON invalide: structure incorrecte');
        return null;
      }
    } catch (parseError) {
      console.error('‚ùå JSON invalide:', parseError.message);
      return null;
    }

  } catch (error) {
    console.error('‚ùå Erreur OpenAI:', error.message);
    return null;
  }
}

// Interface en ligne de commande
if (require.main === module) {
  const technicalJson = process.argv[2];
  const version = process.argv[3] || 'unknown';

  if (!technicalJson) {
    console.error('‚ùå Usage: node generate-changelog.js "<technical_json>" [version]');
    process.exit(1);
  }

  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY environment variable is required');
    process.exit(1);
  }

  generateUserFocusedChangelog(technicalJson, version)
    .then(result => {
      if (result) {
        console.log(result);
      } else {
        console.error('‚ùå Failed to generate changelog');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('‚ùå Error:', error.message);
      process.exit(1);
    });
}

module.exports = { generateUserFocusedChangelog };
