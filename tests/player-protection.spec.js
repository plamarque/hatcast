const { test, expect } = require('@playwright/test');

test.describe('Tests de protection des joueurs HatCast', () => {
  test.beforeEach(async ({ page }) => {
    // Aller sur une saison de test (vous devrez ajuster l'URL selon votre configuration)
    await page.goto('/season/test-season');
    
    // Attendre que la page se charge
    await page.waitForLoadState('domcontentloaded');
    
    // Attendre que la grille des joueurs soit charg√©e
    await page.waitForSelector('table tbody tr', { timeout: 10000 });
  });

  test('Affichage des ic√¥nes de protection pour utilisateur d√©connect√©', async ({ page }) => {
    // V√©rifier que l'utilisateur est bien d√©connect√©
    const loginButton = page.locator('button:has-text("Se connecter")');
    await expect(loginButton).toBeVisible();
    
    // Attendre que les joueurs soient charg√©s
    await page.waitForTimeout(2000);
    
    // V√©rifier qu'il y a des joueurs dans la grille
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    const playerCount = await playerRows.count();
    expect(playerCount).toBeGreaterThan(0);
    
    // V√©rifier que les joueurs prot√©g√©s affichent l'ic√¥ne üîí
    const protectedPlayers = page.locator('span:has-text("üîí")');
    const protectedCount = await protectedPlayers.count();
    
    if (protectedCount > 0) {
      console.log(`‚úÖ ${protectedCount} joueur(s) prot√©g√©(s) d√©tect√©(s) avec l'ic√¥ne üîí`);
      
      // V√©rifier que l'ic√¥ne a le bon titre
      const firstProtectedIcon = protectedPlayers.first();
      const title = await firstProtectedIcon.getAttribute('title');
      expect(title).toContain('Personne prot√©g√©e par mot de passe');
    } else {
      console.log('‚ÑπÔ∏è Aucun joueur prot√©g√© trouv√© dans cette saison');
    }
    
    // V√©rifier qu'il n'y a pas d'ic√¥nes ‚≠ê (r√©serv√©es aux utilisateurs connect√©s)
    const starIcons = page.locator('span:has-text("‚≠ê")');
    const starCount = await starIcons.count();
    expect(starCount).toBe(0);
  });

  test('Affichage des ic√¥nes de protection pour utilisateur connect√©', async ({ page }) => {
    // Se connecter (vous devrez ajuster selon votre syst√®me d'authentification)
    await page.click('button:has-text("Se connecter")');
    
    // Attendre que la modal de connexion s'ouvre
    await page.waitForSelector('input[type="email"]', { timeout: 5000 });
    
    // Remplir les identifiants de test
    await page.fill('input[type="email"]', 'test@example.com');
    await page.fill('input[type="password"]', 'testpassword');
    
    // Cliquer sur se connecter
    await page.click('button:has-text("Se connecter")');
    
    // Attendre que la connexion se fasse
    await page.waitForTimeout(3000);
    
    // V√©rifier que l'utilisateur est connect√©
    const userMenu = page.locator('[data-testid="user-menu"], .user-menu, button:has-text("Mon compte")');
    await expect(userMenu).toBeVisible();
    
    // Attendre que les joueurs prot√©g√©s soient recharg√©s
    await page.waitForTimeout(2000);
    
    // V√©rifier que les joueurs prot√©g√©s par l'utilisateur connect√© affichent l'ic√¥ne ‚≠ê
    const starIcons = page.locator('span:has-text("‚≠ê")');
    const starCount = await starIcons.count();
    
    if (starCount > 0) {
      console.log(`‚úÖ ${starCount} joueur(s) prot√©g√©(s) par l'utilisateur connect√© avec l'ic√¥ne ‚≠ê`);
      
      // V√©rifier que l'ic√¥ne a le bon titre
      const firstStarIcon = starIcons.first();
      const title = await firstStarIcon.getAttribute('title');
      expect(title).toContain('Ma personne');
    } else {
      console.log('‚ÑπÔ∏è Aucun joueur prot√©g√© par l\'utilisateur connect√© trouv√©');
    }
    
    // V√©rifier que les autres joueurs prot√©g√©s affichent toujours l'ic√¥ne üîí
    const lockIcons = page.locator('span:has-text("üîí")');
    const lockCount = await lockIcons.count();
    
    if (lockCount > 0) {
      console.log(`‚úÖ ${lockCount} autre(s) joueur(s) prot√©g√©(s) avec l'ic√¥ne üîí`);
    }
  });

  test('Tri des joueurs prot√©g√©s pour utilisateur connect√©', async ({ page }) => {
    // Se connecter
    await page.click('button:has-text("Se connecter")');
    await page.waitForSelector('input[type="email"]', { timeout: 5000 });
    await page.fill('input[type="email"]', 'test@example.com');
    await page.fill('input[type="password"]', 'testpassword');
    await page.click('button:has-text("Se connecter")');
    await page.waitForTimeout(3000);
    
    // Attendre que les joueurs soient recharg√©s
    await page.waitForTimeout(2000);
    
    // R√©cup√©rer l'ordre des joueurs dans la grille
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    const playerCount = await playerRows.count();
    
    if (playerCount > 0) {
      // V√©rifier que les joueurs prot√©g√©s par l'utilisateur connect√© sont en haut
      const firstPlayerIcon = playerRows.first().locator('span:has-text("‚≠ê"), span:has-text("üîí")');
      
      if (await firstPlayerIcon.isVisible()) {
        const iconText = await firstPlayerIcon.textContent();
        if (iconText === '‚≠ê') {
          console.log('‚úÖ Les joueurs prot√©g√©s par l\'utilisateur connect√© sont bien remont√©s en haut de la grille');
        } else {
          console.log('‚ÑπÔ∏è Premier joueur affiche l\'ic√¥ne üîí (prot√©g√© par un autre utilisateur)');
        }
      }
    }
  });

  test('Modal de d√©tail d\'un joueur prot√©g√©', async ({ page }) => {
    // Attendre que les joueurs soient charg√©s
    await page.waitForTimeout(2000);
    
    // Trouver un joueur prot√©g√© (avec ic√¥ne üîí)
    const protectedPlayerIcon = page.locator('span:has-text("üîí")').first();
    
    if (await protectedPlayerIcon.isVisible()) {
      // Cliquer sur le nom du joueur prot√©g√©
      const playerRow = protectedPlayerIcon.locator('xpath=ancestor::tr');
      const playerName = playerRow.locator('.player-name');
      await playerName.click();
      
      // Attendre que la modal s'ouvre
      await page.waitForTimeout(1000);
      
      // V√©rifier que la modal affiche le bouton "D√©sactiver la protection"
      const disableProtectionButton = page.locator('button:has-text("D√©sactiver la protection")');
      await expect(disableProtectionButton).toBeVisible();
      
      console.log('‚úÖ Modal de joueur prot√©g√© affiche correctement le bouton "D√©sactiver la protection"');
    } else {
      console.log('‚ÑπÔ∏è Aucun joueur prot√©g√© trouv√© pour tester la modal');
    }
  });

  test('Modal de d√©tail d\'un joueur non prot√©g√©', async ({ page }) => {
    // Attendre que les joueurs soient charg√©s
    await page.waitForTimeout(2000);
    
    // Trouver un joueur sans ic√¥ne (non prot√©g√©)
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    let nonProtectedPlayer = null;
    
    for (let i = 0; i < await playerRows.count(); i++) {
      const row = playerRows.nth(i);
      const hasIcon = await row.locator('span:has-text("‚≠ê"), span:has-text("üîí")').isVisible();
      
      if (!hasIcon) {
        nonProtectedPlayer = row;
        break;
      }
    }
    
    if (nonProtectedPlayer) {
      // Cliquer sur le nom du joueur non prot√©g√©
      const playerName = nonProtectedPlayer.locator('.player-name');
      await playerName.click();
      
      // Attendre que la modal s'ouvre
      await page.waitForTimeout(1000);
      
      // V√©rifier que la modal affiche le bouton "Prot√©ger"
      const protectButton = page.locator('button:has-text("Prot√©ger")');
      await expect(protectButton).toBeVisible();
      
      console.log('‚úÖ Modal de joueur non prot√©g√© affiche correctement le bouton "Prot√©ger"');
    } else {
      console.log('‚ÑπÔ∏è Tous les joueurs sont prot√©g√©s, impossible de tester la modal d\'un joueur non prot√©g√©');
    }
  });

  test('Tentative de modification de disponibilit√© d\'un joueur prot√©g√© sans authentification', async ({ page }) => {
    // Attendre que les joueurs soient charg√©s
    await page.waitForTimeout(2000);
    
    // Trouver un joueur prot√©g√©
    const protectedPlayerIcon = page.locator('span:has-text("üîí")').first();
    
    if (await protectedPlayerIcon.isVisible()) {
      // Trouver une cellule de disponibilit√© pour ce joueur
      const playerRow = protectedPlayerIcon.locator('xpath=ancestor::tr');
      const availabilityCell = playerRow.locator('td:not(:first-child):not(:last-child)').first();
      
      // Cliquer sur la cellule de disponibilit√©
      await availabilityCell.click();
      
      // Attendre que la modal de v√©rification de mot de passe s'ouvre
      await page.waitForTimeout(1000);
      
      // V√©rifier qu'une modal de v√©rification s'ouvre
      const passwordModal = page.locator('input[type="password"], .password-verification, [data-testid="password-verification"]');
      
      if (await passwordModal.isVisible()) {
        console.log('‚úÖ Modal de v√©rification de mot de passe s\'ouvre bien pour un joueur prot√©g√©');
      } else {
        console.log('‚ö†Ô∏è Modal de v√©rification de mot de passe non visible (peut √™tre normal selon la configuration)');
      }
    } else {
      console.log('‚ÑπÔ∏è Aucun joueur prot√©g√© trouv√© pour tester la modification de disponibilit√©');
    }
  });
});
