const { test, expect } = require('@playwright/test');

test.describe('Tests du flux de protection des joueurs HatCast - 3 cas de figure', () => {
  test.beforeEach(async ({ page }) => {
    // Aller sur la page d'accueil
    await page.goto('/');
    await page.waitForLoadState('domcontentloaded');
    
    // Attendre que la page se charge
    await page.waitForTimeout(2000);
  });

  test('Cas 1: Protection par utilisateur d√©j√† connect√©', async ({ page }) => {
    console.log('üß™ Test du Cas 1: Protection par utilisateur d√©j√† connect√©');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible, test impossible');
      return;
    }
    
    // Se connecter d'abord
    console.log('üîë √âTAPE 1: Connexion de l\'utilisateur');
    const loginButton = page.locator('button:has-text("Se connecter"), button:has-text("Connexion"), [data-testid="login-button"]');
    
    if (await loginButton.isVisible()) {
      await loginButton.click();
      await page.waitForTimeout(2000);
      
      const emailInput = page.locator('input[type="email"], input[placeholder*="email"], input[name="email"]');
      if (await emailInput.isVisible()) {
        await emailInput.fill('test@example.com');
        const submitButton = page.locator('button:has-text("Envoyer"), button:has-text("Se connecter"), button[type="submit"]');
        
        if (await submitButton.isVisible()) {
          await submitButton.click();
          await page.waitForTimeout(3000);
          
          // Attendre la redirection et v√©rifier la connexion
          await page.waitForTimeout(5000);
          const userMenu = page.locator('[data-testid="user-menu"], .user-menu, .account-menu');
          const isConnected = await userMenu.isVisible();
          
          if (isConnected) {
            console.log('‚úÖ Connexion r√©ussie, passage √† la protection');
          } else {
            console.log('‚ö†Ô∏è Connexion non d√©tect√©e, test impossible');
            return;
          }
        } else {
          console.log('‚ö†Ô∏è Bouton de soumission non trouv√©');
          return;
        }
      } else {
        console.log('‚ö†Ô∏è Champ email non trouv√©');
        return;
      }
    } else {
      console.log('‚ö†Ô∏è Bouton de connexion non trouv√©');
      return;
    }
    
    // Naviguer vers une saison
    console.log('üèÜ √âTAPE 2: Navigation vers une saison');
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester la protection');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // Trouver un joueur non prot√©g√©
    console.log('üîç √âTAPE 3: Recherche d\'un joueur non prot√©g√©');
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    let nonProtectedPlayer = null;
    
    for (let i = 0; i < await playerRows.count(); i++) {
      const row = playerRows.nth(i);
      const hasIcon = await row.locator('span:has-text("‚≠ê"), span:has-text("üîí")').isVisible();
      
      if (!hasIcon) {
        nonProtectedPlayer = row;
        break;
      }
    }
    
    if (!nonProtectedPlayer) {
      console.log('‚ÑπÔ∏è Tous les joueurs sont prot√©g√©s, impossible de tester la protection');
      return;
    }
    
    // Cliquer sur le joueur non prot√©g√©
    console.log('üë§ √âTAPE 4: Ouverture de la modal du joueur');
    const playerName = nonProtectedPlayer.locator('.player-name, td:first-child');
    await playerName.click();
    await page.waitForTimeout(1000);
    
    // V√©rifier que le bouton "Prot√©ger" est visible
    console.log('üîí √âTAPE 5: V√©rification du bouton Prot√©ger');
    const protectButton = page.locator('button:has-text("Prot√©ger")');
    await expect(protectButton).toBeVisible();
    
    // Cliquer sur "Prot√©ger"
    console.log('üîÑ √âTAPE 6: Clic sur Prot√©ger');
    await protectButton.click();
    await page.waitForTimeout(1000);
    
    // V√©rifier que la modal de protection s'ouvre
    console.log('üìã √âTAPE 7: V√©rification de la modal de protection');
    const protectionModal = page.locator('h2:has-text("Prot√©ger mes saisies"), h3:has-text("Prot√©ger mes saisies"), [data-testid="protection-modal"]');
    
    if (await protectionModal.isVisible()) {
      console.log('‚úÖ Modal de protection ouverte correctement');
      
      // V√©rifier que le bouton "Associer √† mon compte" est visible (utilisateur connect√©)
      const associateButton = page.locator('button:has-text("Associer √† mon compte"), button:has-text("Associer mon compte")');
      
      if (await associateButton.isVisible()) {
        console.log('‚úÖ Bouton "Associer √† mon compte" visible (utilisateur connect√©)');
        
        // Cliquer sur "Associer √† mon compte"
        console.log('üîó √âTAPE 8: Association du joueur au compte');
        await associateButton.click();
        await page.waitForTimeout(2000);
        
        // V√©rifier que l'association a r√©ussi
        console.log('‚úÖ √âTAPE 9: V√©rification de l\'association');
        
        // Fermer la modal de protection
        const closeButton = page.locator('button:has-text("Fermer"), button:has-text("√ó"), [data-testid="close-button"]');
        if (await closeButton.isVisible()) {
          await closeButton.click();
          await page.waitForTimeout(1000);
        }
        
        // V√©rifier que le joueur est maintenant en favori (‚≠ê)
        const updatedPlayerRow = page.locator('table tbody tr').filter({ has: playerName });
        const starIcon = updatedPlayerRow.locator('span:has-text("‚≠ê")');
        
        if (await starIcon.isVisible()) {
          console.log('‚úÖ Joueur maintenant en favori (‚≠ê) - Association r√©ussie !');
          
          // V√©rifier que le joueur est remont√© en haut de la liste
          const firstPlayerRow = page.locator('table tbody tr:not(:last-child)').first();
          const firstPlayerName = await firstPlayerRow.locator('.player-name, td:first-child').textContent();
          const originalPlayerName = await playerName.textContent();
          
          if (firstPlayerName === originalPlayerName) {
            console.log('‚úÖ Joueur remont√© en haut de la liste - Tri correct !');
          } else {
            console.log('‚ö†Ô∏è Joueur pas remont√© en haut de la liste');
          }
        } else {
          console.log('‚ùå Joueur pas en favori apr√®s association');
        }
      } else {
        console.log('‚ö†Ô∏è Bouton "Associer √† mon compte" non visible');
      }
    } else {
      console.log('‚ùå Modal de protection non ouverte');
    }
    
    console.log('‚úÖ Test du Cas 1 termin√©');
  });

  test('Cas 2: Protection par utilisateur non connect√© avec email existant', async ({ page }) => {
    console.log('üß™ Test du Cas 2: Protection par utilisateur non connect√© avec email existant');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible, test impossible');
      return;
    }
    
    // Naviguer vers une saison
    console.log('üèÜ √âTAPE 1: Navigation vers une saison');
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester la protection');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // V√©rifier que l'utilisateur est d√©connect√©
    console.log('üîì √âTAPE 2: V√©rification de la d√©connexion');
    const loginButton = page.locator('button:has-text("Se connecter"), button:has-text("Connexion"), [data-testid="login-button"]');
    await expect(loginButton).toBeVisible();
    
    // Trouver un joueur non prot√©g√©
    console.log('üîç √âTAPE 3: Recherche d\'un joueur non prot√©g√©');
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    let nonProtectedPlayer = null;
    
    for (let i = 0; i < await playerRows.count(); i++) {
      const row = playerRows.nth(i);
      const hasIcon = await row.locator('span:has-text("‚≠ê"), span:has-text("üîí")').isVisible();
      
      if (!hasIcon) {
        nonProtectedPlayer = row;
        break;
      }
    }
    
    if (!nonProtectedPlayer) {
      console.log('‚ÑπÔ∏è Tous les joueurs sont prot√©g√©s, impossible de tester la protection');
      return;
    }
    
    // Cliquer sur le joueur non prot√©g√©
    console.log('üë§ √âTAPE 4: Ouverture de la modal du joueur');
    const playerName = nonProtectedPlayer.locator('.player-name, td:first-child');
    await playerName.click();
    await page.waitForTimeout(1000);
    
    // V√©rifier que le bouton "Prot√©ger" est visible
    console.log('üîí √âTAPE 5: V√©rification du bouton Prot√©ger');
    const protectButton = page.locator('button:has-text("Prot√©ger")');
    await expect(protectButton).toBeVisible();
    
    // Cliquer sur "Prot√©ger"
    console.log('üîÑ √âTAPE 6: Clic sur Prot√©ger');
    await protectButton.click();
    await page.waitForTimeout(1000);
    
    // V√©rifier que la modal de protection s'ouvre
    console.log('üìã √âTAPE 7: V√©rification de la modal de protection');
    const protectionModal = page.locator('h2:has-text("Prot√©ger mes saisies"), h3:has-text("Prot√©ger mes saisies"), [data-testid="protection-modal"]');
    
    if (await protectionModal.isVisible()) {
      console.log('‚úÖ Modal de protection ouverte correctement');
      
      // V√©rifier que le bouton "Prot√©ger mes saisies" est visible (utilisateur non connect√©)
      const protectSaisiesButton = page.locator('button:has-text("Prot√©ger mes saisies"), button:has-text("Prot√©ger")');
      
      if (await protectSaisiesButton.isVisible()) {
        console.log('‚úÖ Bouton "Prot√©ger mes saisies" visible (utilisateur non connect√©)');
        
        // Cliquer sur "Prot√©ger mes saisies"
        console.log('üîó √âTAPE 8: D√©marrage de la protection');
        await protectSaisiesButton.click();
        await page.waitForTimeout(1000);
        
        // V√©rifier que le formulaire d'email s'ouvre
        console.log('üìß √âTAPE 9: V√©rification du formulaire d\'email');
        const emailInput = page.locator('input[type="email"], input[placeholder*="email"], input[name="email"]');
        
        if (await emailInput.isVisible()) {
          console.log('‚úÖ Formulaire d\'email ouvert');
          
          // Remplir avec un email existant (utilisateur de test)
          console.log('‚úçÔ∏è √âTAPE 10: Saisie d\'un email existant');
          await emailInput.fill('test@example.com');
          
          // Cliquer sur "Envoyer le lien de v√©rification"
          const sendButton = page.locator('button:has-text("Envoyer le lien de v√©rification"), button:has-text("Envoyer"), button[type="submit"]');
          
          if (await sendButton.isVisible()) {
            await sendButton.click();
            await page.waitForTimeout(2000);
            
            // V√©rifier le message de confirmation
            console.log('‚úÖ √âTAPE 11: V√©rification du message de confirmation');
            const confirmationMessage = page.locator('text=Email envoy√©, text=Confirmation, text=Succ√®s, [data-testid="success-message"]');
            
            if (await confirmationMessage.isVisible()) {
              console.log('‚úÖ Message de confirmation affich√© - Email envoy√©');
              
              // V√©rifier que l'email a √©t√© intercept√© par notre bouchon
              console.log('üìß √âTAPE 12: V√©rification de l\'interception d\'email');
              const { emailInterceptor } = require('./email-interceptor');
              const latestEmail = emailInterceptor.getLatestEmail();
              
              if (latestEmail) {
                console.log('‚úÖ Email intercept√© avec succ√®s !');
                console.log(`   Sujet: ${latestEmail.subject}`);
                console.log(`   √Ä: ${latestEmail.to}`);
                console.log(`   Fichier: ${latestEmail.filename}`);
                
                // Extraire le lien de v√©rification
                const verificationLink = emailInterceptor.extractAllLinks(latestEmail)[0];
                if (verificationLink) {
                  console.log(`   Lien de v√©rification: ${verificationLink}`);
                  
                  // üéØ √âTAPE CRUCIALE : SIMULER LE CLIC SUR LE MAGIC LINK !
                  console.log('üîó √âTAPE 13: Simulation du clic sur le magic link');
                  await page.goto(verificationLink);
                  await page.waitForTimeout(3000);
                  
                  // V√©rifier que la page de v√©rification s'affiche
                  console.log('‚úÖ √âTAPE 14: V√©rification de la page de v√©rification');
                  const verificationPage = page.locator('h1, h2, h3, p').filter({ hasText: /V√©rification|Verification|Email|Email v√©rifi√©|Compte existant/ });
                  
                  if (await verificationPage.isVisible()) {
                    console.log('‚úÖ Page de v√©rification affich√©e');
                    
                    // Attendre que la v√©rification se termine et que la redirection s'effectue
                    console.log('‚è≥ Attente de la fin de la v√©rification et redirection...');
                    await page.waitForTimeout(5000);
                    
                    // V√©rifier que l'utilisateur est maintenant connect√© (ou message de connexion manuelle)
                    console.log('üîê √âTAPE 15: V√©rification du r√©sultat de la v√©rification');
                    const userMenu = page.locator('[data-testid="user-menu"], .user-menu, button:has-text("Mon compte")');
                    const successMessage = page.locator('text=succ√®s, text=r√©ussi, text=prot√©g√©, text=Compte existant, text=connexion manuelle');
                    
                    if (await userMenu.isVisible()) {
                      console.log('‚úÖ Utilisateur connect√© automatiquement !');
                    } else if (await successMessage.isVisible()) {
                      console.log('‚úÖ Message de succ√®s affich√© - Protection activ√©e, connexion manuelle requise');
                    } else {
                      console.log('‚ö†Ô∏è R√©sultat de v√©rification non clair');
                    }
                    
                    // üéØ √âTAPE SP√âCIFIQUE AU CAS 2 : Connexion manuelle requise
                    console.log('üîë √âTAPE 16: Connexion manuelle requise pour l\'email existant');
                    
                    // Retourner √† la page d'accueil pour se connecter
                    await page.goto('/');
                    await page.waitForTimeout(2000);
                    
                    // Cliquer sur "Se connecter"
                    const loginButton = page.locator('button:has-text("Se connecter"), button:has-text("Connexion"), [data-testid="login-button"]');
                    if (await loginButton.isVisible()) {
                      await loginButton.click();
                      await page.waitForTimeout(2000);
                      
                      // Remplir l'email (le m√™me que celui utilis√© pour la protection)
                      const emailInput = page.locator('input[type="email"], input[placeholder*="email"], input[name="email"]');
                      if (await emailInput.isVisible()) {
                        await emailInput.fill('test@example.com'); // M√™me email que la protection
                        await page.waitForTimeout(500);
                        
                        // Cliquer sur "Envoyer le lien de connexion"
                        const sendLoginButton = page.locator('button:has-text("Envoyer"), button:has-text("Envoyer le lien"), button[type="submit"]');
                        if (await sendLoginButton.isVisible()) {
                          await sendLoginButton.click();
                          await page.waitForTimeout(2000);
                          
                          // Attendre et intercepter l'email de connexion
                          console.log('üìß √âTAPE 17: Interception de l\'email de connexion');
                          const { emailInterceptor } = require('./email-interceptor');
                          await page.waitForTimeout(3000); // Attendre l'envoi
                          
                          const loginEmail = emailInterceptor.getLatestEmail();
                          if (loginEmail) {
                            console.log('‚úÖ Email de connexion intercept√©:', loginEmail.subject);
                            
                            // Extraire le lien de connexion
                            const loginLink = emailInterceptor.extractAllLinks(loginEmail)[0];
                            if (loginLink) {
                              console.log('üîó √âTAPE 18: Simulation du clic sur le lien de connexion');
                              await page.goto(loginLink);
                              await page.waitForTimeout(3000);
                              
                              // V√©rifier que la connexion a r√©ussi
                              const connectedUserMenu = page.locator('[data-testid="user-menu"], .user-menu, button:has-text("Mon compte")');
                              if (await connectedUserMenu.isVisible()) {
                                console.log('‚úÖ Connexion manuelle r√©ussie !');
                                
                                // Maintenant naviguer vers la saison pour v√©rifier la protection
                                console.log('üèÜ √âTAPE 19: V√©rification de la protection apr√®s connexion manuelle');
                                await page.goto('/');
                                await page.waitForTimeout(2000);
                                
                                // Cliquer sur la m√™me saison
                                const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
                                await seasonCards.first().click();
                                await page.waitForLoadState('domcontentloaded');
                                await page.waitForTimeout(3000);
                                
                                // Recharger la page pour voir les changements
                                await page.reload();
                                await page.waitForTimeout(2000);
                                
                                // Chercher le joueur dans la grille et v√©rifier qu'il est maintenant en favori (‚≠ê)
                                const updatedPlayerRow = page.locator('table tbody tr').filter({ hasText: await playerName.textContent() });
                                const starIcon = updatedPlayerRow.locator('span:has-text("‚≠ê")');
                                
                                if (await starIcon.isVisible()) {
                                  console.log('‚úÖ Joueur maintenant en favori (‚≠ê) - Protection et connexion manuelle r√©ussies !');
                                } else {
                                  console.log('‚ùå Joueur pas en favori apr√®s connexion manuelle');
                                }
                              } else {
                                console.log('‚ùå Connexion manuelle √©chou√©e');
                              }
                            } else {
                              console.log('‚ùå Aucun lien de connexion trouv√© dans l\'email');
                            }
                          } else {
                            console.log('‚ùå Email de connexion non intercept√©');
                          }
                        } else {
                          console.log('‚ö†Ô∏è Bouton d\'envoi de connexion non trouv√©');
                        }
                      } else {
                        console.log('‚ö†Ô∏è Champ email de connexion non trouv√©');
                      }
                    } else {
                      console.log('‚ö†Ô∏è Bouton de connexion non trouv√©');
                    }
                  } else {
                    console.log('‚ùå Page de v√©rification non affich√©e');
                  }
                  
                  console.log('‚úÖ Test complet r√©ussi - Magic link simul√© et sc√©nario termin√© !');
                } else {
                  console.log('‚ö†Ô∏è Aucun lien trouv√© dans l\'email intercept√©');
                }
              } else {
                console.log('‚ö†Ô∏è Aucun email intercept√© - V√©rifier la configuration du bouchon');
              }
            } else {
              console.log('‚ö†Ô∏è Message de confirmation non affich√©');
            }
          } else {
            console.log('‚ö†Ô∏è Bouton d\'envoi non trouv√©');
          }
        } else {
          console.log('‚ùå Formulaire d\'email non ouvert');
        }
      } else {
        console.log('‚ö†Ô∏è Bouton "Prot√©ger mes saisies" non visible');
      }
    } else {
      console.log('‚ùå Modal de protection non ouverte');
    }
    
    console.log('‚úÖ Test du Cas 2 termin√©');
  });

  test('Cas 3: Protection par utilisateur non connect√© avec nouvel email', async ({ page }) => {
    console.log('üß™ Test du Cas 3: Protection par utilisateur non connect√© avec nouvel email');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible, test impossible');
      return;
    }
    
    // Naviguer vers une saison
    console.log('üèÜ √âTAPE 1: Navigation vers une saison');
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester la protection');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // V√©rifier que l'utilisateur est d√©connect√©
    console.log('üîì √âTAPE 2: V√©rification de la d√©connexion');
    const loginButton = page.locator('button:has-text("Se connecter"), button:has-text("Connexion"), [data-testid="login-button"]');
    await expect(loginButton).toBeVisible();
    
    // Trouver un joueur non prot√©g√©
    console.log('üîç √âTAPE 3: Recherche d\'un joueur non prot√©g√©');
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    let nonProtectedPlayer = null;
    
    for (let i = 0; i < await playerRows.count(); i++) {
      const row = playerRows.nth(i);
      const hasIcon = await row.locator('span:has-text("‚≠ê"), span:has-text("üîí")').isVisible();
      
      if (!hasIcon) {
        nonProtectedPlayer = row;
        break;
      }
    }
    
    if (!nonProtectedPlayer) {
      console.log('‚ÑπÔ∏è Tous les joueurs sont prot√©g√©s, impossible de tester la protection');
      return;
    }
    
    // Cliquer sur le joueur non prot√©g√©
    console.log('üë§ √âTAPE 4: Ouverture de la modal du joueur');
    const playerName = nonProtectedPlayer.locator('.player-name, td:first-child');
    await playerName.click();
    await page.waitForTimeout(1000);
    
    // V√©rifier que le bouton "Prot√©ger" est visible
    console.log('üîí √âTAPE 5: V√©rification du bouton Prot√©ger');
    const protectButton = page.locator('button:has-text("Prot√©ger")');
    await expect(protectButton).toBeVisible();
    
    // Cliquer sur "Prot√©ger"
    console.log('üîÑ √âTAPE 6: Clic sur Prot√©ger');
    await protectButton.click();
    await page.waitForTimeout(1000);
    
    // V√©rifier que la modal de protection s'ouvre
    console.log('üìã √âTAPE 7: V√©rification de la modal de protection');
    const protectionModal = page.locator('h2:has-text("Prot√©ger mes saisies"), h3:has-text("Prot√©ger mes saisies"), [data-testid="protection-modal"]');
    
    if (await protectionModal.isVisible()) {
      console.log('‚úÖ Modal de protection ouverte correctement');
      
      // V√©rifier que le bouton "Prot√©ger mes saisies" est visible (utilisateur non connect√©)
      const protectSaisiesButton = page.locator('button:has-text("Prot√©ger mes saisies"), button:has-text("Prot√©ger")');
      
      if (await protectSaisiesButton.isVisible()) {
        console.log('‚úÖ Bouton "Prot√©ger mes saisies" visible (utilisateur non connect√©)');
        
        // Cliquer sur "Prot√©ger mes saisies"
        console.log('üîó √âTAPE 8: D√©marrage de la protection');
        await protectSaisiesButton.click();
        await page.waitForTimeout(1000);
        
        // V√©rifier que le formulaire d'email s'ouvre
        console.log('üìß √âTAPE 9: V√©rification du formulaire d\'email');
        const emailInput = page.locator('input[type="email"], input[placeholder*="email"], input[name="email"]');
        
        if (await emailInput.isVisible()) {
          console.log('‚úÖ Formulaire d\'email ouvert');
          
          // Remplir avec un nouvel email (g√©n√©r√© al√©atoirement)
          console.log('‚úçÔ∏è √âTAPE 10: Saisie d\'un nouvel email');
          const randomEmail = `test-${Date.now()}@example.com`;
          await emailInput.fill(randomEmail);
          
          // Cliquer sur "Envoyer le lien de v√©rification"
          const sendButton = page.locator('button:has-text("Envoyer le lien de v√©rification"), button:has-text("Envoyer"), button[type="submit"]');
          
          if (await sendButton.isVisible()) {
            await sendButton.click();
            await page.waitForTimeout(2000);
            
            // V√©rifier le message de confirmation
            console.log('‚úÖ √âTAPE 11: V√©rification du message de confirmation');
            const confirmationMessage = page.locator('text=Email envoy√©, text=Confirmation, text=Succ√®s, [data-testid="success-message"]');
            
            if (await confirmationMessage.isVisible()) {
              console.log('‚úÖ Message de confirmation affich√© - Email envoy√©');
              console.log(`‚ÑπÔ∏è Email utilis√©: ${randomEmail}`);
              
              // V√©rifier que l'email a √©t√© intercept√© par notre bouchon
              console.log('üìß √âTAPE 12: V√©rification de l\'interception d\'email');
              const { emailInterceptor } = require('./email-interceptor');
              const latestEmail = emailInterceptor.getLatestEmail();
              
              if (latestEmail) {
                console.log('‚úÖ Email intercept√© avec succ√®s !');
                console.log(`   Sujet: ${latestEmail.subject}`);
                console.log(`   √Ä: ${latestEmail.to}`);
                console.log(`   Fichier: ${latestEmail.filename}`);
                
                // Extraire le lien de v√©rification
                const verificationLink = emailInterceptor.extractAllLinks(latestEmail)[0];
                if (verificationLink) {
                  console.log(`   Lien de v√©rification: ${verificationLink}`);
                  
                  // üéØ √âTAPE CRUCIALE : SIMULER LE CLIC SUR LE MAGIC LINK !
                  console.log('üîó √âTAPE 13: Simulation du clic sur le magic link');
                  await page.goto(verificationLink);
                  await page.waitForTimeout(3000);
                  
                  // V√©rifier que la page de v√©rification s'affiche
                  console.log('‚úÖ √âTAPE 14: V√©rification de la page de v√©rification');
                  const verificationPage = page.locator('h1, h2, h3, p').filter({ hasText: /V√©rification|Verification|Email|Email v√©rifi√©|Compte cr√©√©/ });
                  
                  if (await verificationPage.isVisible()) {
                    console.log('‚úÖ Page de v√©rification affich√©e');
                    
                    // Attendre que la v√©rification se termine et que la redirection s'effectue
                    console.log('‚è≥ Attente de la fin de la v√©rification et redirection...');
                    await page.waitForTimeout(5000);
                    
                    // V√©rifier que l'utilisateur est maintenant connect√© automatiquement (nouveau compte)
                    console.log('üîê √âTAPE 15: V√©rification de la connexion automatique');
                    const userMenu = page.locator('[data-testid="user-menu"], .user-menu, button:has-text("Mon compte")');
                    
                    if (await userMenu.isVisible()) {
                      console.log('‚úÖ Utilisateur connect√© automatiquement avec le nouveau compte !');
                      
                      // Retourner √† la page de la saison pour v√©rifier la protection
                      console.log('üèÜ √âTAPE 16: Retour √† la saison pour v√©rifier la protection');
                      await page.goBack();
                      await page.waitForTimeout(2000);
                      
                      // Recharger la page pour voir les changements
                      await page.reload();
                      await page.waitForTimeout(2000);
                      
                      // Chercher le joueur dans la grille et v√©rifier qu'il est en favori (‚≠ê)
                      const updatedPlayerRow = page.locator('table tbody tr').filter({ hasText: await playerName.textContent() });
                      const starIcon = updatedPlayerRow.locator('span:has-text("‚≠ê")');
                      
                      if (await starIcon.isVisible()) {
                        console.log('‚úÖ Joueur maintenant en favori (‚≠ê) - Protection et connexion r√©ussies !');
                      } else {
                        console.log('‚ùå Joueur pas en favori apr√®s protection');
                      }
                    } else {
                      console.log('‚ùå Utilisateur pas connect√© automatiquement');
                    }
                  } else {
                    console.log('‚ùå Page de v√©rification non affich√©e');
                  }
                  
                  console.log('‚úÖ Test complet r√©ussi - Magic link simul√© et sc√©nario termin√© !');
                } else {
                  console.log('‚ö†Ô∏è Aucun lien trouv√© dans l\'email intercept√©');
                }
              } else {
                console.log('‚ö†Ô∏è Aucun email intercept√© - V√©rifier la configuration du bouchon');
              }
            } else {
              console.log('‚ö†Ô∏è Message de confirmation non affich√©');
            }
          } else {
            console.log('‚ö†Ô∏è Bouton d\'envoi non trouv√©');
          }
        } else {
          console.log('‚ùå Formulaire d\'email non ouvert');
        }
      } else {
        console.log('‚ö†Ô∏è Bouton "Prot√©ger mes saisies" non visible');
      }
    } else {
      console.log('‚ùå Modal de protection non ouverte');
    }
    
    console.log('‚úÖ Test du Cas 3 termin√©');
  });

  test('V√©rification de la logique des favoris selon l\'√©tat de connexion', async ({ page }) => {
    console.log('üß™ Test de la logique des favoris selon l\'√©tat de connexion');
    
    // Aller sur la page d'accueil
    await page.goto('/');
    await page.waitForLoadState('domcontentloaded');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible, test des favoris impossible');
      return;
    }
    
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester les favoris');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // √âTAPE 1: V√©rification en mode d√©connect√©
    console.log('üîí √âTAPE 1: V√©rification en mode d√©connect√©');
    const starIconsDisconnected = page.locator('span:has-text("‚≠ê")');
    const starCountDisconnected = await starIconsDisconnected.count();
    console.log(`‚≠ê Nombre d'ic√¥nes √©toile en mode d√©connect√©: ${starCountDisconnected}`);
    expect(starCountDisconnected).toBe(0);
    console.log('‚úÖ Aucun favori affich√© en mode d√©connect√© (comportement correct)');
    
    const lockIconsDisconnected = page.locator('span:has-text("üîí")');
    const lockCountDisconnected = await lockIconsDisconnected.count();
    console.log(`üîí Nombre d'ic√¥nes cadenas en mode d√©connect√©: ${lockCountDisconnected}`);
    
    // √âTAPE 2: Connexion et v√©rification des favoris
    console.log('üîë √âTAPE 2: Connexion et v√©rification des favoris');
    const loginButton = page.locator('button:has-text("Se connecter"), button:has-text("Connexion"), [data-testid="login-button"]');
    
    if (await loginButton.isVisible()) {
      await loginButton.click();
      await page.waitForTimeout(2000);
      
      const emailInput = page.locator('input[type="email"], input[placeholder*="email"], input[name="email"]');
      if (await emailInput.isVisible()) {
        await emailInput.fill('test@example.com');
        const submitButton = page.locator('button:has-text("Envoyer"), button:has-text("Se connecter"), button[type="submit"]');
        
        if (await submitButton.isVisible()) {
          await submitButton.click();
          await page.waitForTimeout(3000);
          console.log('üìß Email de connexion envoy√©, attente de la redirection...');
          await page.waitForTimeout(5000);
          
          const userMenu = page.locator('[data-testid="user-menu"], .user-menu, .account-menu');
          const isConnected = await userMenu.isVisible();
          
          if (isConnected) {
            console.log('‚úÖ Connexion r√©ussie, v√©rification des favoris...');
            await page.waitForTimeout(3000);
            
            const starIconsConnected = page.locator('span:has-text("‚≠ê")');
            const starCountConnected = await starIconsConnected.count();
            console.log(`‚≠ê Nombre d'ic√¥nes √©toile apr√®s connexion: ${starCountConnected}`);
            
            if (starCountConnected > 0) {
              console.log('‚úÖ Favoris affich√©s apr√®s connexion (comportement correct)');
              const firstStarIcon = starIconsConnected.first();
              const title = await firstStarIcon.getAttribute('title');
              console.log(`‚úÖ Titre de l'ic√¥ne √©toile: ${title}`);
              expect(title).toContain('Ma personne');
            } else {
              console.log('‚ÑπÔ∏è Aucun favori trouv√© pour cet utilisateur de test');
            }
          } else {
            console.log('‚ö†Ô∏è Connexion non d√©tect√©e, test des favoris en mode connect√© impossible');
          }
        } else {
          console.log('‚ö†Ô∏è Bouton de soumission non trouv√© dans le formulaire de connexion');
        }
      } else {
        console.log('‚ö†Ô∏è Champ email non trouv√© dans le formulaire de connexion');
      }
    } else {
      console.log('‚ö†Ô∏è Bouton de connexion non trouv√©, test de connexion impossible');
    }
    
    // √âTAPE 3: D√©connexion et v√©rification de la disparition des favoris
    console.log('üö™ √âTAPE 3: D√©connexion et v√©rification de la disparition des favoris');
    const logoutButton = page.locator('button:has-text("Se d√©connecter"), button:has-text("D√©connexion"), [data-testid="logout-button"]');
    
    if (await logoutButton.isVisible()) {
      await logoutButton.click();
      await page.waitForTimeout(3000);
      console.log('‚úÖ D√©connexion effectu√©e, v√©rification de la disparition des favoris...');
      await page.waitForTimeout(3000);
      
      const starIconsDisconnectedAgain = page.locator('span:has-text("‚≠ê")');
      const starCountDisconnectedAgain = await starIconsDisconnectedAgain.count();
      console.log(`‚≠ê Nombre d'ic√¥nes √©toile apr√®s d√©connexion: ${starCountDisconnectedAgain}`);
      expect(starCountDisconnectedAgain).toBe(0);
      console.log('‚úÖ Aucun favori affich√© apr√®s d√©connexion (comportement correct)');
      
      const lockIconsDisconnectedAgain = page.locator('span:has-text("üîí")');
      const lockCountDisconnectedAgain = await lockIconsDisconnectedAgain.count();
      console.log(`üîí Nombre d'ic√¥nes cadenas apr√®s d√©connexion: ${lockCountDisconnectedAgain}`);
      expect(lockCountDisconnectedAgain).toBeGreaterThanOrEqual(0);
      console.log('‚úÖ Ic√¥nes cadenas toujours visibles apr√®s d√©connexion (comportement correct)');
    } else {
      console.log('‚ö†Ô∏è Bouton de d√©connexion non trouv√©, test de d√©connexion impossible');
    }
    
    console.log('‚úÖ Test de la logique des favoris selon l\'√©tat de connexion termin√©');
  });

  test('Test complet avec v√©rification d\'email (simulation)', async ({ page }) => {
    console.log('üß™ Test complet avec v√©rification d\'email (simulation)');
    
    // Ce test simule le processus complet en utilisant l\'intercepteur d\'emails
    // Il montre comment on pourrait tester la v√©rification d\'email
    
    console.log('üìß √âTAPE 1: Simulation d\'un email de protection');
    const { simulateFirebaseEmailSend } = require('./email-interceptor');
    
    const testEmail = simulateFirebaseEmailSend(
      'test@example.com',
      'V√©rification de protection HatCast',
      `<html>
        <body>
          <h1>V√©rification de protection</h1>
          <p>Cliquez sur ce lien pour v√©rifier votre email :</p>
          <a href="https://localhost:5173/magic?token=test-token&action=verify_email&playerId=test-player&seasonId=test-season">V√©rifier mon email</a>
        </body>
      </html>`,
      'V√©rification de protection HatCast\nCliquez sur ce lien : https://localhost:5173/magic?token=test-token&action=verify_email&playerId=test-player&seasonId=test-season'
    );
    
    console.log('‚úÖ Email simul√© cr√©√©:', testEmail.filename);
    
    // V√©rifier que l'email a √©t√© intercept√©
    const { emailInterceptor } = require('./email-interceptor');
    const latestEmail = emailInterceptor.getLatestEmail();
    
    if (latestEmail) {
      console.log('‚úÖ Email intercept√© avec succ√®s !');
      console.log(`   Sujet: ${latestEmail.subject}`);
      console.log(`   √Ä: ${latestEmail.to}`);
      
      // Extraire le lien de v√©rification
      const verificationLink = emailInterceptor.extractAllLinks(latestEmail)[0];
      if (verificationLink) {
        console.log(`   Lien de v√©rification: ${verificationLink}`);
        
        // Simuler la navigation vers le lien de v√©rification
        console.log('üîó √âTAPE 2: Simulation de la navigation vers le lien de v√©rification');
        await page.goto(verificationLink);
        await page.waitForLoadState('domcontentloaded');
        await page.waitForTimeout(2000);
        
        // V√©rifier que la page de v√©rification s'affiche
        console.log('üìã √âTAPE 3: V√©rification de la page de v√©rification');
        const verificationPage = page.locator('text=V√©rification, text=Protection, text=Succ√®s');
        
        if (await verificationPage.isVisible()) {
          console.log('‚úÖ Page de v√©rification affich√©e correctement');
          console.log('‚úÖ Test complet avec v√©rification d\'email r√©ussi !');
        } else {
          console.log('‚ö†Ô∏è Page de v√©rification non affich√©e comme attendu');
        }
      } else {
        console.log('‚ö†Ô∏è Aucun lien trouv√© dans l\'email intercept√©');
      }
    } else {
      console.log('‚ùå Aucun email intercept√© - Test √©chou√©');
    }
    
    console.log('‚úÖ Test complet avec v√©rification d\'email termin√©');
  });
});
