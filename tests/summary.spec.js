const { test, expect } = require('@playwright/test');

test.describe('R√©sum√© des tests HatCast - V√©rification compl√®te', () => {
  test('V√©rification compl√®te de l\'interface d\'authentification', async ({ page }) => {
    console.log('üß™ Test de v√©rification compl√®te HatCast');
    console.log('=====================================');
    
    // Aller sur la page d'accueil (utilise la baseURL de Playwright)
    await page.goto('/');
    await page.waitForLoadState('domcontentloaded');
    
    // 1. V√©rifier que la page se charge
    console.log('1Ô∏è‚É£ V√©rification du chargement de la page...');
    await expect(page.locator('body')).toBeVisible();
    const title = await page.title();
    expect(title).toContain('HatCast');
    console.log('   ‚úÖ Page charg√©e, titre:', title);
    
    // 2. V√©rifier le header
    console.log('2Ô∏è‚É£ V√©rification du header...');
    await expect(page.locator('[data-testid="app-header"]')).toBeVisible();
    console.log('   ‚úÖ Header pr√©sent');
    
    // 3. V√©rifier le bouton de connexion
    console.log('3Ô∏è‚É£ V√©rification du bouton de connexion...');
    await expect(page.locator('[data-testid="login-btn"]')).toBeVisible();
    console.log('   ‚úÖ Bouton de connexion visible');
    
    // 4. Ouvrir la modal de connexion
    console.log('4Ô∏è‚É£ Ouverture de la modal de connexion...');
    await page.click('[data-testid="login-btn"]');
    
    // 5. V√©rifier tous les √©l√©ments de la modal
    console.log('5Ô∏è‚É£ V√©rification des √©l√©ments de la modal...');
    
    // Champs de saisie
    await expect(page.locator('[data-testid="email-input"]')).toBeVisible();
    await expect(page.locator('[data-testid="password-input"]')).toBeVisible();
    console.log('   ‚úÖ Champs email et mot de passe pr√©sents');
    
    // Boutons
    await expect(page.locator('[data-testid="submit-btn"]')).toBeVisible();
    await expect(page.locator('[data-testid="create-account-btn"]')).toBeVisible();
    await expect(page.locator('[data-testid="forgot-password-btn"]')).toBeVisible();
    console.log('   ‚úÖ Tous les boutons pr√©sents');
    
    // 6. Test de saisie
    console.log('6Ô∏è‚É£ Test de saisie dans les champs...');
    await page.fill('[data-testid="email-input"]', 'test@example.com');
    await page.fill('[data-testid="password-input"]', 'testpassword');
    console.log('   ‚úÖ Saisie dans les champs r√©ussie');
    
    // 7. Test de l'intercepteur d'emails
    console.log('7Ô∏è‚É£ Test de l\'intercepteur d\'emails...');
    const { simulateFirebaseEmailSend } = require('./email-interceptor');
    
    // Utiliser la baseURL de Playwright pour les liens dans les emails
    const baseUrl = process.env.BASE_URL || 'http://localhost:5173';
    
    const testEmail = simulateFirebaseEmailSend(
      'test@example.com',
      'Test de r√©initialisation HatCast',
      `<html><body><a href="${baseUrl}/reset?token=test123">R√©initialiser</a></body></html>`,
      `Cliquez sur ce lien: ${baseUrl}/reset?token=test123`
    );
    
    expect(testEmail.to).toBe('test@example.com');
    expect(testEmail.subject).toBe('Test de r√©initialisation HatCast');
    console.log('   ‚úÖ Intercepteur d\'emails fonctionne');
    
    // 8. Prendre une screenshot finale
    console.log('8Ô∏è‚É£ Capture d\'√©cran finale...');
    await page.screenshot({ path: 'test-output/final-verification.png' });
    console.log('   ‚úÖ Screenshot sauvegard√©e');
    
    console.log('\nüéâ V√©rification compl√®te r√©ussie !');
    console.log('=====================================');
    console.log('‚úÖ Page d\'accueil charg√©e');
    console.log('‚úÖ Header pr√©sent');
    console.log('‚úÖ Bouton de connexion fonctionnel');
    console.log('‚úÖ Modal de connexion compl√®te');
    console.log('‚úÖ Tous les champs et boutons pr√©sents');
    console.log('‚úÖ Intercepteur d\'emails op√©rationnel');
    console.log('‚úÖ Tests automatis√©s pr√™ts !');
  });
});
