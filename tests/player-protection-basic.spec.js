const { test, expect } = require('@playwright/test');

test.describe('Tests de base de protection des joueurs HatCast', () => {
  test('V√©rification de la page d\'accueil et navigation', async ({ page }) => {
    // Aller sur la page d'accueil
    await page.goto('/');
    
    // Attendre que la page se charge
    await page.waitForLoadState('domcontentloaded');
    
    // V√©rifier que la page d'accueil se charge correctement
    await expect(page.locator('h1:has-text("Faites vos √©quipes d\'impro")')).toBeVisible();
    
    // Prendre une screenshot de la page d'accueil
    await page.screenshot({ 
      path: 'test-results/player-protection-homepage.png',
      fullPage: false 
    });
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount > 0) {
      console.log('‚úÖ Section "Saisons en cours" trouv√©e');
      
      // Compter les cartes de saison
      const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
      const actualSeasonCount = await seasonCards.count();
      console.log(`üìä Nombre de saisons trouv√©es: ${actualSeasonCount}`);
      
      if (actualSeasonCount > 0) {
        console.log('üîç Navigation vers la premi√®re saison pour tester la grille...');
        
        // Cliquer sur la premi√®re saison
        await seasonCards.first().click();
        
        // Attendre que la page de la saison se charge
        await page.waitForLoadState('domcontentloaded');
        await page.waitForTimeout(3000);
        
        // V√©rifier qu'il y a des joueurs dans la grille
        const playerRows = page.locator('table tbody tr:not(:last-child)');
        const playerCount = await playerRows.count();
        console.log(`üìä Nombre de joueurs trouv√©s: ${playerCount}`);
        
        if (playerCount > 0) {
          // Compter les diff√©rents types d'ic√¥nes
          const starIcons = page.locator('span:has-text("‚≠ê")');
          const lockIcons = page.locator('span:has-text("üîí")');
          const noIconPlayers = page.locator('table tbody tr:not(:last-child)').filter({ hasNot: page.locator('span:has-text("‚≠ê"), span:has-text("üîí")') });
          
          const starCount = await starIcons.count();
          const lockCount = await lockIcons.count();
          const noIconCount = await noIconPlayers.count();
          
          console.log(`‚≠ê Joueurs avec √©toile (favoris): ${starCount}`);
          console.log(`üîí Joueurs avec cadenas (prot√©g√©s): ${lockCount}`);
          console.log(`üìù Joueurs sans ic√¥ne (non prot√©g√©s): ${noIconCount}`);
          
          // V√©rifier que le total correspond
          expect(starCount + lockCount + noIconCount).toBe(playerCount);
          
          // V√©rifier que les ic√¥nes ont les bons titres
          if (starCount > 0) {
            const firstStarIcon = starIcons.first();
            const title = await firstStarIcon.getAttribute('title');
            console.log(`‚úÖ Premier joueur avec √©toile - titre: ${title}`);
            expect(title).toContain('Ma personne');
          }
          
          if (lockCount > 0) {
            const firstLockIcon = lockIcons.first();
            const title = await firstLockIcon.getAttribute('title');
            console.log(`‚úÖ Premier joueur avec cadenas - titre: ${title}`);
            expect(title).toContain('Personne prot√©g√©e par mot de passe');
          }
          
          // Prendre une screenshot de la grille
          await page.screenshot({ 
            path: 'test-results/player-protection-grid.png',
            fullPage: false 
          });
        } else {
          console.log('‚ÑπÔ∏è Aucun joueur trouv√© dans cette saison');
        }
      } else {
        console.log('‚ÑπÔ∏è Aucune saison disponible pour tester la grille');
      }
    } else {
      console.log('‚ÑπÔ∏è Section "Saisons en cours" non trouv√©e');
    }
    
    console.log('‚úÖ Test de la page d\'accueil et navigation termin√©');
  });

  test('V√©rification de la modal de d√©tail des joueurs', async ({ page }) => {
    // Aller sur la page d'accueil
    await page.goto('/');
    
    // Attendre que la page se charge
    await page.waitForLoadState('domcontentloaded');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Section "Saisons en cours" non trouv√©e, test des modals impossible');
      return;
    }
    
    // Cliquer sur la premi√®re saison disponible
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester les modals');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // Trouver un joueur prot√©g√© (avec cadenas)
    const protectedPlayerIcon = page.locator('span:has-text("üîí")').first();
    
    if (await protectedPlayerIcon.isVisible()) {
      console.log('üîí Test de la modal d\'un joueur prot√©g√©');
      
      // Cliquer sur le nom du joueur prot√©g√©
      const playerRow = protectedPlayerIcon.locator('xpath=ancestor::tr');
      const playerName = playerRow.locator('.player-name');
      await playerName.click();
      
      // Attendre que la modal s'ouvre
      await page.waitForTimeout(2000);
      
      // V√©rifier que la modal affiche le bouton "D√©sactiver la protection"
      const disableProtectionButton = page.locator('button:has-text("D√©sactiver la protection")');
      
      if (await disableProtectionButton.isVisible()) {
        console.log('‚úÖ Modal de joueur prot√©g√© affiche correctement le bouton "D√©sactiver la protection"');
      } else {
        console.log('‚ö†Ô∏è Bouton "D√©sactiver la protection" non visible dans la modal');
      }
      
      // Fermer la modal
      const closeButton = page.locator('button:has-text("Fermer"), .close-button, [data-testid="close-modal"]');
      if (await closeButton.isVisible()) {
        await closeButton.click();
        await page.waitForTimeout(1000);
      }
    } else {
      console.log('‚ÑπÔ∏è Aucun joueur prot√©g√© trouv√© pour tester la modal');
    }
    
    // Trouver un joueur non prot√©g√© (sans ic√¥ne)
    const playerRows = page.locator('table tbody tr:not(:last-child)');
    let nonProtectedPlayer = null;
    
    for (let i = 0; i < await playerRows.count(); i++) {
      const row = playerRows.nth(i);
      const hasIcon = await row.locator('span:has-text("‚≠ê"), span:has-text("üîí")').isVisible();
      
      if (!hasIcon) {
        nonProtectedPlayer = row;
        break;
      }
    }
    
    if (nonProtectedPlayer) {
      console.log('üìù Test de la modal d\'un joueur non prot√©g√©');
      
      // Cliquer sur le nom du joueur non prot√©g√©
      const playerName = nonProtectedPlayer.locator('.player-name');
      await playerName.click();
      
      // Attendre que la modal s'ouvre
      await page.waitForTimeout(2000);
      
      // V√©rifier que la modal affiche le bouton "Prot√©ger"
      const protectButton = page.locator('button:has-text("Prot√©ger")');
      
      if (await protectButton.isVisible()) {
        console.log('‚úÖ Modal de joueur non prot√©g√© affiche correctement le bouton "Prot√©ger"');
      } else {
        console.log('‚ö†Ô∏è Bouton "Prot√©ger" non visible dans la modal');
      }
      
      // Fermer la modal
      const closeButton = page.locator('button:has-text("Fermer"), .close-button, [data-testid="close-modal"]');
      if (await closeButton.isVisible()) {
        await closeButton.click();
        await page.waitForTimeout(1000);
      }
    } else {
      console.log('‚ÑπÔ∏è Tous les joueurs sont prot√©g√©s, impossible de tester la modal d\'un joueur non prot√©g√©');
    }
    
    console.log('‚úÖ Test des modals de d√©tail termin√©');
  });

  test('V√©rification de la structure de la grille', async ({ page }) => {
    // Aller sur la page d'accueil
    await page.goto('/');
    
    // Attendre que la page se charge
    await page.waitForLoadState('domcontentloaded');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Section "Saisons en cours" non trouv√©e, test de la structure de la grille impossible');
      return;
    }
    
    // Cliquer sur la premi√®re saison disponible
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester la structure de la grille');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // V√©rifier la structure de la grille
    const table = page.locator('table');
    await expect(table).toBeVisible();
    
    // V√©rifier qu'il y a des en-t√™tes de colonnes
    const headerRow = table.locator('thead tr');
    await expect(headerRow).toBeVisible();
    
    // V√©rifier qu'il y a des lignes de joueurs
    const playerRows = table.locator('tbody tr:not(:last-child)');
    const playerCount = await playerRows.count();
    expect(playerCount).toBeGreaterThan(0);
    
    // V√©rifier que chaque ligne de joueur a la bonne structure
    for (let i = 0; i < Math.min(playerCount, 3); i++) { // Tester seulement les 3 premiers
      const row = playerRows.nth(i);
      
      // V√©rifier qu'il y a une cellule pour le nom du joueur
      const nameCell = row.locator('td:first-child');
      await expect(nameCell).toBeVisible();
      
      // V√©rifier qu'il y a un nom de joueur
      const playerName = nameCell.locator('.player-name');
      if (await playerName.isVisible()) {
        const name = await playerName.textContent();
        console.log(`üë§ Joueur ${i + 1}: ${name?.trim()}`);
      }
      
      // V√©rifier qu'il y a des cellules de disponibilit√©
      const availabilityCells = row.locator('td:not(:first-child):not(:last-child)');
      const cellCount = await availabilityCells.count();
      expect(cellCount).toBeGreaterThan(0);
    }
    
    // V√©rifier qu'il y a une ligne "Ajouter une personne" √† la fin
    const addPlayerRow = table.locator('tbody tr:last-child');
    await expect(addPlayerRow).toBeVisible();
    
    const addButton = addPlayerRow.locator('button:has-text("Ajouter")');
    if (await addButton.isVisible()) {
      console.log('‚úÖ Bouton "Ajouter une personne" visible dans la derni√®re ligne');
    }
    
    console.log('‚úÖ Test de structure de la grille termin√©');
  });

  test('V√©rification de la logique des favoris selon l\'√©tat de connexion', async ({ page }) => {
    console.log('üß™ Test de la logique des favoris selon l\'√©tat de connexion');
    
    // Aller sur la page d'accueil
    await page.goto('/');
    await page.waitForLoadState('domcontentloaded');
    
    // V√©rifier qu'il y a des saisons disponibles
    const seasonSection = page.locator('h2:has-text("Saisons en cours")');
    const seasonCount = await seasonSection.count();
    
    if (seasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible, test des favoris impossible');
      return;
    }
    
    // Cliquer sur la premi√®re saison disponible
    const seasonCards = page.locator('h2:has-text("Saisons en cours")').locator('xpath=following-sibling::div//div[contains(@class, "cursor-pointer")]');
    const actualSeasonCount = await seasonCards.count();
    
    if (actualSeasonCount === 0) {
      console.log('‚ÑπÔ∏è Aucune saison disponible pour tester les favoris');
      return;
    }
    
    await seasonCards.first().click();
    await page.waitForLoadState('domcontentloaded');
    await page.waitForTimeout(3000);
    
    // √âTAPE 1: V√©rifier l'√©tat en mode d√©connect√©
    console.log('üîí √âTAPE 1: V√©rification en mode d√©connect√©');
    
    // Compter les ic√¥nes ‚≠ê (favoris) - il ne devrait y en avoir AUCUNE
    const starIconsDisconnected = page.locator('span:has-text("‚≠ê")');
    const starCountDisconnected = await starIconsDisconnected.count();
    
    console.log(`‚≠ê Nombre d\'ic√¥nes √©toile en mode d√©connect√©: ${starCountDisconnected}`);
    
    // V√âRIFICATION CRITIQUE: En mode d√©connect√©, AUCUN favori ne doit √™tre affich√©
    expect(starCountDisconnected).toBe(0);
    console.log('‚úÖ Aucun favori affich√© en mode d√©connect√© (comportement correct)');
    
    // Compter les ic√¥nes üîí (prot√©g√©s) - elles doivent √™tre visibles
    const lockIconsDisconnected = page.locator('span:has-text("üîí")');
    const lockCountDisconnected = await lockIconsDisconnected.count();
    console.log(`üîí Nombre d\'ic√¥nes cadenas en mode d√©connect√©: ${lockCountDisconnected}`);
    
    // √âTAPE 2: Se connecter et v√©rifier l'affichage des favoris
    console.log('üîë √âTAPE 2: Connexion et v√©rification des favoris');
    
    // Chercher le bouton de connexion
    const loginButton = page.locator('button:has-text("Se connecter"), button:has-text("Connexion"), [data-testid="login-button"]');
    
    if (await loginButton.isVisible()) {
      await loginButton.click();
      await page.waitForTimeout(2000);
      
      // Remplir le formulaire de connexion (email)
      const emailInput = page.locator('input[type="email"], input[placeholder*="email"], input[name="email"]');
      if (await emailInput.isVisible()) {
        await emailInput.fill('test@example.com');
        
        // Chercher et cliquer sur le bouton d'envoi
        const submitButton = page.locator('button:has-text("Envoyer"), button:has-text("Se connecter"), button[type="submit"]');
        if (await submitButton.isVisible()) {
          await submitButton.click();
          await page.waitForTimeout(3000);
          
          console.log('üìß Email de connexion envoy√©, attente de la redirection...');
          
          // Attendre que la page se recharge ou qu'un message de confirmation s'affiche
          await page.waitForTimeout(5000);
          
          // V√©rifier si on est connect√© (chercher des √©l√©ments qui indiquent la connexion)
          const userMenu = page.locator('[data-testid="user-menu"], .user-menu, .account-menu');
          const isConnected = await userMenu.isVisible();
          
          if (isConnected) {
            console.log('‚úÖ Connexion r√©ussie, v√©rification des favoris...');
            
            // Attendre un peu pour que les favoris se chargent
            await page.waitForTimeout(3000);
            
            // Recompter les ic√¥nes ‚≠ê apr√®s connexion
            const starIconsConnected = page.locator('span:has-text("‚≠ê")');
            const starCountConnected = await starIconsConnected.count();
            
            console.log(`‚≠ê Nombre d\'ic√¥nes √©toile apr√®s connexion: ${starCountConnected}`);
            
            // Si l\'utilisateur a des joueurs prot√©g√©s, ils doivent maintenant √™tre visibles
            if (starCountConnected > 0) {
              console.log('‚úÖ Favoris affich√©s apr√®s connexion (comportement correct)');
              
              // V√©rifier que les ic√¥nes ‚≠ê ont le bon titre
              const firstStarIcon = starIconsConnected.first();
              const title = await firstStarIcon.getAttribute('title');
              console.log(`‚úÖ Titre de l\'ic√¥ne √©toile: ${title}`);
              expect(title).toContain('Ma personne');
            } else {
              console.log('‚ÑπÔ∏è Aucun favori trouv√© pour cet utilisateur de test');
            }
          } else {
            console.log('‚ö†Ô∏è Connexion non d√©tect√©e, test des favoris en mode connect√© impossible');
          }
        } else {
          console.log('‚ö†Ô∏è Bouton de soumission non trouv√© dans le formulaire de connexion');
        }
      } else {
        console.log('‚ö†Ô∏è Champ email non trouv√© dans le formulaire de connexion');
      }
    } else {
      console.log('‚ö†Ô∏è Bouton de connexion non trouv√©, test de connexion impossible');
    }
    
    // √âTAPE 3: Se d√©connecter et v√©rifier la disparition des favoris
    console.log('üö™ √âTAPE 3: D√©connexion et v√©rification de la disparition des favoris');
    
    // Chercher le bouton de d√©connexion
    const logoutButton = page.locator('button:has-text("Se d√©connecter"), button:has-text("D√©connexion"), [data-testid="logout-button"]');
    
    if (await logoutButton.isVisible()) {
      await logoutButton.click();
      await page.waitForTimeout(3000);
      
      console.log('‚úÖ D√©connexion effectu√©e, v√©rification de la disparition des favoris...');
      
      // Attendre que la page se recharge
      await page.waitForTimeout(3000);
      
      // Recompter les ic√¥nes ‚≠ê apr√®s d√©connexion
      const starIconsDisconnectedAgain = page.locator('span:has-text("‚≠ê")');
      const starCountDisconnectedAgain = await starIconsDisconnectedAgain.count();
      
      console.log(`‚≠ê Nombre d\'ic√¥nes √©toile apr√®s d√©connexion: ${starCountDisconnectedAgain}`);
      
      // V√âRIFICATION CRITIQUE: Apr√®s d√©connexion, AUCUN favori ne doit √™tre affich√©
      expect(starCountDisconnectedAgain).toBe(0);
      console.log('‚úÖ Aucun favori affich√© apr√®s d√©connexion (comportement correct)');
      
      // V√©rifier que les ic√¥nes üîí sont toujours visibles
      const lockIconsDisconnectedAgain = page.locator('span:has-text("üîí")');
      const lockCountDisconnectedAgain = await lockIconsDisconnectedAgain.count();
      console.log(`üîí Nombre d\'ic√¥nes cadenas apr√®s d√©connexion: ${lockCountDisconnectedAgain}`);
      
      // Les ic√¥nes üîí doivent toujours √™tre visibles (joueurs prot√©g√©s)
      expect(lockCountDisconnectedAgain).toBeGreaterThanOrEqual(0);
      console.log('‚úÖ Ic√¥nes cadenas toujours visibles apr√®s d√©connexion (comportement correct)');
      
    } else {
      console.log('‚ö†Ô∏è Bouton de d√©connexion non trouv√©, test de d√©connexion impossible');
    }
    
    console.log('‚úÖ Test de la logique des favoris selon l\'√©tat de connexion termin√©');
  });
});
