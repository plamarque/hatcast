#!/bin/bash

# Script de d√©ploiement PWA pour HatCast
# Usage: ./deploy-pwa.sh

echo "üöÄ D√©ploiement PWA HatCast"
echo "=========================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les √©tapes
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. V√©rifier que nous sommes dans le bon r√©pertoire
print_step "V√©rification du r√©pertoire de travail..."
if [ ! -f "package.json" ]; then
    print_error "package.json non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire du projet."
    exit 1
fi
print_success "R√©pertoire de projet d√©tect√©"

# 2. V√©rifier les d√©pendances
print_step "V√©rification des d√©pendances..."
if [ ! -d "node_modules" ]; then
    print_warning "node_modules non trouv√©. Installation des d√©pendances..."
    npm install
    if [ $? -ne 0 ]; then
        print_error "√âchec de l'installation des d√©pendances"
        exit 1
    fi
else
    print_success "D√©pendances d√©j√† install√©es"
fi

# 3. Nettoyer le build pr√©c√©dent
print_step "Nettoyage du build pr√©c√©dent..."
rm -rf dist
print_success "Build pr√©c√©dent supprim√©"

# 4. Build de l'application
print_step "Build de l'application avec PWA..."
npm run build
if [ $? -ne 0 ]; then
    print_error "√âchec du build"
    exit 1
fi
print_success "Build termin√© avec succ√®s"

# 5. V√©rifier que les fichiers PWA sont pr√©sents
print_step "V√©rification des fichiers PWA..."
if [ ! -f "dist/manifest.webmanifest" ]; then
    print_error "manifest.webmanifest non trouv√© dans dist/"
    exit 1
fi

if [ ! -f "dist/sw.js" ]; then
    print_error "sw.js non trouv√© dans dist/"
    exit 1
fi

if [ ! -d "dist/icons" ]; then
    print_error "Dossier icons non trouv√© dans dist/"
    exit 1
fi

print_success "Tous les fichiers PWA sont pr√©sents"

# 6. V√©rifier le contenu du manifest
print_step "Validation du manifest..."
if command -v jq &> /dev/null; then
    if jq . dist/manifest.webmanifest >/dev/null 2>&1; then
        print_success "Manifest JSON valide"
    else
        print_error "Manifest JSON invalide"
        exit 1
    fi
else
    print_warning "jq non install√©, validation JSON ignor√©e"
fi

# 7. Pr√©parer le d√©ploiement
print_step "Pr√©paration du d√©ploiement..."
echo ""
echo "üìã Fichiers PWA g√©n√©r√©s :"
echo "   ‚úÖ manifest.webmanifest"
echo "   ‚úÖ sw.js"
echo "   ‚úÖ icons/ (dossier)"
echo "   ‚úÖ pwa-debug.html"
echo ""

# 8. Instructions de d√©ploiement
echo "üöÄ Instructions de d√©ploiement :"
echo "================================"
echo ""
echo "1. Committez les changements :"
echo "   git add ."
echo "   git commit -m 'Fix PWA installation issues'"
echo "   git push origin main"
echo ""
echo "2. Attendez le d√©ploiement GitHub Pages (2-5 minutes)"
echo ""
echo "3. V√©rifiez le d√©ploiement :"
echo "   ./check-pwa.sh"
echo ""
echo "4. Testez l'installation PWA :"
echo "   - Ouvrez https://selections.la-malice.fr sur Chrome Mobile"
echo "   - Appuyez sur le menu (3 points)"
echo "   - Cherchez 'Ajouter √† l'√©cran d'accueil'"
echo ""
echo "5. Diagnostic d√©taill√© :"
echo "   https://selections.la-malice.fr/pwa-debug.html"
echo ""

# 9. V√©rification finale
print_step "V√©rification finale..."
echo ""
echo "üìã Points √† v√©rifier apr√®s d√©ploiement :"
echo "   ‚úÖ HTTPS actif sur le site"
echo "   ‚úÖ Manifest accessible : https://selections.la-malice.fr/manifest.webmanifest"
echo "   ‚úÖ Service worker accessible : https://selections.la-malice.fr/sw.js"
echo "   ‚úÖ Ic√¥nes accessibles dans /icons/"
echo "   ‚úÖ Page de diagnostic : https://selections.la-malice.fr/pwa-debug.html"
echo ""

print_success "D√©ploiement PWA pr√©par√© avec succ√®s !"
echo ""
echo "üí° Rappel : Chrome peut prendre jusqu'√† 24h pour d√©tecter"
echo "   l'√©ligibilit√© PWA d'un site. Testez r√©guli√®rement."
