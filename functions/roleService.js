/**
 * Service de gestion des r√¥les c√¥t√© Cloud Functions HatCast
 * G√®re les r√¥les Super Admin et Admin de saison
 */

const functions = require('firebase-functions');
const admin = require('firebase-admin');

class RoleService {
  constructor() {
    this.superAdminEmails = this.getSuperAdminEmails();
  }

  /**
   * R√©cup√®re la liste des Super Admins depuis Firebase Functions Config
   */
  getSuperAdminEmails() {
    try {
      const config = functions.config();
      const superAdminEmails = config.superadmin?.emails;
      
      if (!superAdminEmails) {
        console.warn('‚ö†Ô∏è Configuration Super Admin non trouv√©e, aucun Super Admin autoris√©');
        return [];
      }
      
      // S√©parer les emails par virgules et nettoyer
      return superAdminEmails.split(',').map(email => email.trim()).filter(email => email);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des Super Admins:', error);
      return [];
    }
  }

  /**
   * V√©rifie si un utilisateur est Super Admin
   */
  isSuperAdmin(userEmail) {
    if (!userEmail) {
      return false;
    }
    
    const isSuperAdmin = this.superAdminEmails.includes(userEmail);
    console.log(`üîê V√©rification Super Admin pour ${userEmail}: ${isSuperAdmin ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    return isSuperAdmin;
  }

  /**
   * V√©rifie si un utilisateur est Admin d'une saison sp√©cifique
   */
  async isSeasonAdmin(seasonId, userEmail) {
    try {
      if (!seasonId || !userEmail) {
        return false;
      }
      
      console.log(`üîê V√©rification Admin de saison pour ${userEmail} dans ${seasonId}`);
      
      // R√©cup√©rer les r√¥les de la saison
      const seasonDoc = await admin.firestore()
        .collection('seasons')
        .doc(seasonId)
        .get();
      
      if (!seasonDoc.exists) {
        console.log(`‚ö†Ô∏è Saison ${seasonId} non trouv√©e`);
        return false;
      }
      
      const seasonData = seasonDoc.data();
      const admins = seasonData.roles?.admins || [];
      
      const isAdmin = admins.includes(userEmail);
      console.log(`üîê ${userEmail} ${isAdmin ? 'EST' : 'N\'EST PAS'} admin de la saison ${seasonId}`);
      
      return isAdmin;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification Admin de saison pour ${userEmail} dans ${seasonId}:`, error);
      return false;
    }
  }

  /**
   * Accorde le r√¥le Admin de saison √† un utilisateur
   */
  async grantSeasonAdmin(seasonId, userEmail, grantedBy) {
    try {
      console.log(`üîê Octroi du r√¥le Admin de saison ${seasonId} √† ${userEmail} par ${grantedBy}`);
      
      // V√©rifier que la saison existe
      const seasonRef = admin.firestore().collection('seasons').doc(seasonId);
      const seasonDoc = await seasonRef.get();
      
      if (!seasonDoc.exists) {
        throw new Error(`Saison ${seasonId} non trouv√©e`);
      }
      
      // R√©cup√©rer les r√¥les actuels
      const seasonData = seasonDoc.data();
      const currentRoles = seasonData.roles || { admins: [], users: [] };
      
      // Ajouter l'email s'il n'y est pas d√©j√†
      if (!currentRoles.admins.includes(userEmail)) {
        currentRoles.admins.push(userEmail);
        
        // Mettre √† jour Firestore
        await seasonRef.update({
          roles: currentRoles
        });
        
        // Log d'audit
        await this.logRoleChange(seasonId, userEmail, 'admin', 'granted', grantedBy);
        
        console.log(`‚úÖ R√¥le Admin accord√© √† ${userEmail} pour la saison ${seasonId}`);
      } else {
        console.log(`‚ÑπÔ∏è ${userEmail} est d√©j√† admin de la saison ${seasonId}`);
      }
      
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'octroi du r√¥le Admin de saison:`, error);
      throw error;
    }
  }

  /**
   * R√©voque le r√¥le Admin de saison d'un utilisateur
   */
  async revokeSeasonAdmin(seasonId, userEmail, revokedBy) {
    try {
      console.log(`üîê R√©vocation du r√¥le Admin de saison ${seasonId} √† ${userEmail} par ${revokedBy}`);
      
      // V√©rifier que la saison existe
      const seasonRef = admin.firestore().collection('seasons').doc(seasonId);
      const seasonDoc = await seasonRef.get();
      
      if (!seasonDoc.exists) {
        throw new Error(`Saison ${seasonId} non trouv√©e`);
      }
      
      // R√©cup√©rer les r√¥les actuels
      const seasonData = seasonDoc.data();
      const currentRoles = seasonData.roles || { admins: [], users: [] };
      
      // Retirer l'email s'il y est
      const adminIndex = currentRoles.admins.indexOf(userEmail);
      if (adminIndex > -1) {
        currentRoles.admins.splice(adminIndex, 1);
        
        // Mettre √† jour Firestore
        await seasonRef.update({
          roles: currentRoles
        });
        
        // Log d'audit
        await this.logRoleChange(seasonId, userEmail, 'admin', 'revoked', revokedBy);
        
        console.log(`‚úÖ R√¥le Admin r√©voqu√© √† ${userEmail} pour la saison ${seasonId}`);
      } else {
        console.log(`‚ÑπÔ∏è ${userEmail} n'√©tait pas admin de la saison ${seasonId}`);
      }
      
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©vocation du r√¥le Admin de saison:`, error);
      throw error;
    }
  }

  /**
   * Liste tous les admins d'une saison
   */
  async listSeasonAdmins(seasonId) {
    try {
      console.log(`üîê Listage des admins de la saison ${seasonId}`);
      
      const seasonDoc = await admin.firestore()
        .collection('seasons')
        .doc(seasonId)
        .get();
      
      if (!seasonDoc.exists) {
        throw new Error(`Saison ${seasonId} non trouv√©e`);
      }
      
      const seasonData = seasonDoc.data();
      const admins = seasonData.roles?.admins || [];
      
      console.log(`üìã ${admins.length} admins trouv√©s pour la saison ${seasonId}:`, admins);
      
      return admins;
    } catch (error) {
      console.error(`‚ùå Erreur lors du listage des admins de la saison ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Initialise les r√¥les pour une nouvelle saison
   */
  async initializeSeasonRoles(seasonId, creatorEmail) {
    try {
      console.log(`üîê Initialisation des r√¥les pour la nouvelle saison ${seasonId}`);
      
      const seasonRef = admin.firestore().collection('seasons').doc(seasonId);
      
      const initialRoles = {
        roles: {
          admins: [creatorEmail], // Le cr√©ateur devient admin par d√©faut
          users: []
        }
      };
      
      await seasonRef.update(initialRoles);
      
      // Log d'audit
      await this.logRoleChange(seasonId, creatorEmail, 'admin', 'granted', 'system');
      
      console.log(`‚úÖ R√¥les initialis√©s pour ${seasonId} avec ${creatorEmail} comme admin`);
      
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'initialisation des r√¥les pour ${seasonId}:`, error);
      throw error;
    }
  }

  /**
   * Log les changements de r√¥les pour audit
   */
  async logRoleChange(seasonId, userEmail, role, action, performedBy) {
    try {
      const auditLog = {
        seasonId,
        userEmail,
        role,
        action, // 'granted' ou 'revoked'
        performedBy,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        type: 'role_change'
      };
      
      // Sauvegarder dans Firestore
      await admin.firestore().collection('audit_logs').add(auditLog);
      
      console.log(`üìù Audit log cr√©√© pour changement de r√¥le:`, auditLog);
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du log d\'audit:', error);
      // Ne pas faire √©chouer l'op√©ration principale pour un probl√®me de log
    }
  }

  /**
   * Middleware pour prot√©ger les fonctions sensibles (Super Admin uniquement)
   */
  async requireSuperAdmin(req, res, callback) {
    try {
      const authHeader = req.headers.authorization;
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ error: 'Token d\'authentification requis' });
      }

      const token = authHeader.split('Bearer ')[1];
      const decodedToken = await admin.auth().verifyIdToken(token);
      
      const isSuperAdmin = this.isSuperAdmin(decodedToken.email);
      if (!isSuperAdmin) {
        return res.status(403).json({ 
          error: 'Forbidden',
          message: 'Acc√®s r√©serv√© aux Super Admins'
        });
      }
      
      req.user = decodedToken;
      await callback();
    } catch (error) {
      console.error('‚ùå Erreur de v√©rification Super Admin:', error);
      res.status(401).json({ error: 'Token d\'authentification invalide' });
    }
  }

  /**
   * Middleware pour prot√©ger les fonctions de saison (Super Admin ou Admin de saison)
   */
  async requireSeasonAdmin(seasonId, req, res, callback) {
    try {
      const authHeader = req.headers.authorization;
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ error: 'Token d\'authentification requis' });
      }

      const token = authHeader.split('Bearer ')[1];
      const decodedToken = await admin.auth().verifyIdToken(token);
      
      // V√©rifier Super Admin (acc√®s √† tout)
      const isSuperAdmin = this.isSuperAdmin(decodedToken.email);
      if (isSuperAdmin) {
        req.user = decodedToken;
        await callback();
        return;
      }
      
      // V√©rifier Admin de saison
      const isSeasonAdmin = await this.isSeasonAdmin(seasonId, decodedToken.email);
      if (!isSeasonAdmin) {
        return res.status(403).json({ 
          error: 'Forbidden',
          message: 'Acc√®s r√©serv√© aux admins de cette saison'
        });
      }
      
      req.user = decodedToken;
      await callback();
    } catch (error) {
      console.error('‚ùå Erreur de v√©rification Admin de saison:', error);
      res.status(401).json({ error: 'Token d\'authentification invalide' });
    }
  }
}

module.exports = RoleService;
