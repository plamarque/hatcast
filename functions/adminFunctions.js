/**
 * Fonctions HTTP prot√©g√©es pour la gestion admin HatCast
 * Toutes ces fonctions n√©cessitent des permissions admin
 */

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const AdminService = require('./adminService');
const { cors } = require('./corsConfig');
const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');

const adminService = new AdminService();

/**
 * Cr√©e ou met √† jour un secret Firebase
 */
async function setFirebaseSecret(secretName, secretValue) {
  const client = new SecretManagerServiceClient();
  const projectId = process.env.FIREBASE_PROJECT_ID || 'impro-selector';
  const parent = `projects/${projectId}`;
  
  try {
    // V√©rifier si le secret existe
    const secretPath = `${parent}/secrets/${secretName}`;
    
    try {
      await client.getSecret({ name: secretPath });
      
      // Le secret existe, ajouter une nouvelle version
      const [version] = await client.addSecretVersion({
        parent: secretPath,
        payload: {
          data: Buffer.from(secretValue, 'utf8'),
        },
      });
      
      console.log(`‚úÖ Secret ${secretName} mis √† jour: ${version.name}`);
      return { success: true, action: 'updated', version: version.name };
      
    } catch (getError) {
      if (getError.code === 5) { // NOT_FOUND
        // Le secret n'existe pas, le cr√©er
        const [secret] = await client.createSecret({
          parent: parent,
          secretId: secretName,
          secret: {
            replication: {
              automatic: {},
            },
          },
        });
        
        // Ajouter la premi√®re version
        const [version] = await client.addSecretVersion({
          parent: secret.name,
          payload: {
            data: Buffer.from(secretValue, 'utf8'),
          },
        });
        
        console.log(`‚úÖ Secret ${secretName} cr√©√©: ${version.name}`);
        return { success: true, action: 'created', version: version.name };
      }
      
      throw getError;
    }
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour du secret ${secretName}:`, error);
    throw error;
  }
}

/**
 * Supprime un secret Firebase
 */
async function deleteFirebaseSecret(secretName) {
  const client = new SecretManagerServiceClient();
  const projectId = process.env.FIREBASE_PROJECT_ID || 'impro-selector';
  const secretPath = `projects/${projectId}/secrets/${secretName}`;
  
  try {
    await client.deleteSecret({ name: secretPath });
    console.log(`‚úÖ Secret ${secretName} supprim√©`);
    return { success: true, action: 'deleted' };
  } catch (error) {
    if (error.code === 5) { // NOT_FOUND
      console.log(`‚ÑπÔ∏è Secret ${secretName} n'existe pas (d√©j√† supprim√©)`);
      return { success: true, action: 'already_deleted' };
    }
    console.error(`‚ùå Erreur lors de la suppression du secret ${secretName}:`, error);
    throw error;
  }
}

/**
 * R√©cup√®re TOUS les secrets Firebase depuis Google Cloud Secret Manager
 */
async function getAllFirebaseSecrets() {
  try {
    const {SecretManagerServiceClient} = require('@google-cloud/secret-manager');
    const client = new SecretManagerServiceClient();
    
    // Utiliser l'ID du projet Firebase actuel, pas l'environnement de l'app
    const projectId = process.env.FIREBASE_PROJECT_ID || 'impro-selector';
    
    // 1. Lister TOUS les secrets du projet
    const parent = `projects/${projectId}`;
    const [secretsList] = await client.listSecrets({parent});
    
    console.log(`üîç ${secretsList.length} secrets trouv√©s dans le projet ${projectId}`);
    
    const allSecrets = {
      total: secretsList.length,
      project: projectId,
      secrets: {},
      categories: {
        email: {},
        api: {},
        firebase: {},
        other: {}
      }
    };
    
    // 2. R√©cup√©rer les valeurs de chaque secret
    for (const secret of secretsList) {
      const secretName = secret.name.split('/').pop(); // Extraire juste le nom
      
      try {
        const name = `${secret.name}/versions/latest`;
        const [version] = await client.accessSecretVersion({name});
        const secretValue = version.payload.data.toString();
        
        // Cat√©goriser le secret
        let category = 'other';
        if (secretName.includes('GMAIL') || secretName.includes('ETHEREAL') || secretName.includes('SMTP')) {
          category = 'email';
        } else if (secretName.includes('API') || secretName.includes('VAPID') || secretName.includes('KEY')) {
          category = 'api';
        } else if (secretName.includes('FIREBASE') || secretName.includes('FIRESTORE')) {
          category = 'firebase';
        }
        
        // Masquer partiellement le secret pour la s√©curit√©
        let displayValue = secretValue;
        if (secretValue.length > 8) {
          displayValue = secretValue.slice(0, 4) + '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' + secretValue.slice(-4);
        } else if (secretValue.length > 0) {
          displayValue = '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
        }
        
        const secretInfo = {
          name: secretName,
          value: secretValue, // Valeur compl√®te pour usage interne
          displayValue: displayValue, // Valeur masqu√©e pour l'UI
          length: secretValue.length,
          category: category,
          created: secret.createTime,
          updated: secret.updateTime
        };
        
        allSecrets.secrets[secretName] = secretInfo;
        allSecrets.categories[category][secretName] = secretInfo;
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Impossible de r√©cup√©rer le secret ${secretName}:`, error.message);
        
        const secretInfo = {
          name: secretName,
          value: null,
          displayValue: '‚ùå Erreur',
          error: error.message,
          category: 'other'
        };
        
        allSecrets.secrets[secretName] = secretInfo;
        allSecrets.categories.other[secretName] = secretInfo;
      }
    }
    
    return allSecrets;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des secrets:', error);
    return { 
      error: 'Impossible de r√©cup√©rer les secrets',
      details: error.message,
      total: 0,
      project: functions.config().env?.firebase_env || 'impro-selector'
    };
  }
}

/**
 * Middleware d'authentification Firebase
 */
async function authenticateRequest(req, res, next) {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ 
        error: 'No token provided',
        message: 'Token d\'authentification requis'
      });
    }
    
    const token = authHeader.split('Bearer ')[1];
    const decodedToken = await admin.auth().verifyIdToken(token);
    
    req.user = {
      uid: decodedToken.uid,
      email: decodedToken.email,
      emailVerified: decodedToken.email_verified
    };
    
    next();
  } catch (error) {
    console.error('‚ùå Erreur d\'authentification:', error);
    return res.status(401).json({ 
      error: 'Invalid token',
      message: 'Token d\'authentification invalide'
    });
  }
}

/**
 * V√©rifier le statut admin d'un utilisateur
 */
exports.checkAdminStatus = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    try {
      await authenticateRequest(req, res, async () => {
        const user = req.user;
        const isAdmin = adminService.isAdmin(user.email);
        
        res.json({
          isAdmin,
          email: user.email,
          uid: user.uid,
          timestamp: new Date().toISOString()
        });
      });
    } catch (error) {
      console.error('‚ùå Erreur dans checkAdminStatus:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: 'Erreur lors de la v√©rification du statut admin'
      });
    }
  });
});

/**
 * Dumper les informations d'environnement (admin uniquement)
 */
exports.dumpEnvironment = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    try {
      await authenticateRequest(req, res, async () => {
        // V√©rification admin
        adminService.requireAdmin(req, res, async () => {
          try {
            // R√©cup√©rer TOUS les vrais secrets Firebase
            const firebaseSecrets = await getAllFirebaseSecrets();
            
            const environmentInfo = {
              timestamp: new Date().toISOString(),
              user: req.user,
              environment: process.env.NODE_ENV || 'production',
              firebase: {
                projectId: process.env.FIREBASE_PROJECT_ID || 'non-d√©fini',
                region: process.env.FIREBASE_REGION || 'non-d√©fini'
              },
              functions: {
                config: functions.config(),
                admin: adminService.checkConfig()
              },
              secrets: firebaseSecrets
            };
            
            console.log('üîç Dump environnement demand√© par admin:', req.user.email);
            
            res.json({
              success: true,
              data: environmentInfo,
              message: 'Informations d\'environnement r√©cup√©r√©es avec succ√®s'
            });
          } catch (error) {
            console.error('‚ùå Erreur lors du dump environnement:', error);
            res.status(500).json({ 
              error: 'Dump failed',
              message: 'Erreur lors de la r√©cup√©ration des informations'
            });
          }
        });
      });
    } catch (error) {
      console.error('‚ùå Erreur dans dumpEnvironment:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: 'Erreur lors de la v√©rification des permissions'
      });
    }
  });
});

/**
 * V√©rifier la configuration admin (admin uniquement)
 */
exports.checkAdminConfig = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    try {
      await authenticateRequest(req, res, async () => {
        // V√©rification admin
        adminService.requireAdmin(req, res, async () => {
          try {
            const config = adminService.checkConfig();
            
            console.log('üîß Configuration admin v√©rifi√©e par:', req.user.email);
            
            res.json({
              success: true,
              data: config,
              message: 'Configuration admin r√©cup√©r√©e avec succ√®s'
            });
          } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification config admin:', error);
            res.status(500).json({ 
              error: 'Config check failed',
              message: 'Erreur lors de la v√©rification de la configuration'
            });
          }
        });
      });
    } catch (error) {
      console.error('‚ùå Erreur dans checkAdminConfig:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: 'Erreur lors de la v√©rification des permissions'
      });
    }
  });
});

/**
 * Test de s√©curit√© (admin uniquement)
 */
exports.testAdminAccess = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    try {
      await authenticateRequest(req, res, async () => {
        // V√©rification admin
        adminService.requireAdmin(req, res, async () => {
          try {
            console.log('üß™ Test d\'acc√®s admin r√©ussi pour:', req.user.email);
            
            res.json({
              success: true,
              message: 'Acc√®s admin v√©rifi√© avec succ√®s',
              user: {
                email: req.user.email,
                uid: req.user.uid,
                isAdmin: true
              },
              timestamp: new Date().toISOString()
            });
          } catch (error) {
            console.error('‚ùå Erreur lors du test admin:', error);
            res.status(500).json({ 
              error: 'Test failed',
              message: 'Erreur lors du test d\'acc√®s admin'
            });
          }
        });
      });
    } catch (error) {
      console.error('‚ùå Erreur dans testAdminAccess:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: 'Erreur lors de la v√©rification des permissions'
      });
    }
  });
});

/**
 * R√©cup√©rer le niveau de log configur√© (admin uniquement)
 */
exports.getLogLevel = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    try {
      await authenticateRequest(req, res, async () => {
        // V√©rification admin
        adminService.requireAdmin(req, res, async () => {
          try {
            const config = functions.config();
            const logLevel = config.logs?.level || 'info';
            
            console.log(`üîß Niveau de log r√©cup√©r√© par ${req.user.email}: ${logLevel}`);
            
            res.json({
              success: true,
              level: logLevel,
              message: 'Niveau de log r√©cup√©r√© avec succ√®s',
              timestamp: new Date().toISOString()
            });
          } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du niveau de log:', error);
            res.status(500).json({ 
              error: 'Log level retrieval failed',
              message: 'Erreur lors de la r√©cup√©ration du niveau de log'
            });
          }
        });
      });
    } catch (error) {
      console.error('‚ùå Erreur dans getLogLevel:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: 'Erreur lors de la v√©rification des permissions'
      });
    }
  });
});

/**
 * Mettre √† jour le niveau de log (admin uniquement)
 */
exports.setLogLevel = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    try {
      await authenticateRequest(req, res, async () => {
        // V√©rification admin
        adminService.requireAdmin(req, res, async () => {
          try {
            const { level } = req.body;
            
            if (!level || !['debug', 'info', 'warn', 'error', 'silent'].includes(level)) {
              return res.status(400).json({
                error: 'Invalid log level',
                message: 'Niveau de log invalide. Valeurs accept√©es: debug, info, warn, error, silent'
              });
            }
            
            // Mettre √† jour la configuration Firebase
            const config = functions.config();
            const currentConfig = config.logs || {};
            currentConfig.level = level;
            
            console.log(`üîß Niveau de log mis √† jour par ${req.user.email}: ${level}`);
            
            res.json({
              success: true,
              level: level,
              message: `Niveau de log mis √† jour vers ${level}`,
              timestamp: new Date().toISOString()
            });
          } catch (error) {
            console.error('‚ùå Erreur lors de la mise √† jour du niveau de log:', error);
            res.status(500).json({ 
              error: 'Log level update failed',
              message: 'Erreur lors de la mise √† jour du niveau de log'
            });
          }
        });
      });
    } catch (error) {
      console.error('‚ùå Erreur dans setLogLevel:', error);
      res.status(500).json({ 
        error: 'Internal server error',
        message: 'Erreur lors de la v√©rification des permissions'
      });
    }
  });
});

// ===== FONCTIONS PASSWORD RESET =====

// Callable: r√©initialise le mot de passe avec un token custom
exports.resetPasswordWithCustomToken = functions.https.onCall(async (data, context) => {
  try {
    const { email, token, newPassword } = data || {}
    
    console.log('üîê Demande de reset password avec token custom', { 
      email: email ? email.substring(0, 3) + '‚Ä¢‚Ä¢@‚Ä¢‚Ä¢‚Ä¢‚Ä¢.com' : 'undefined',
      hasToken: !!token,
      hasPassword: !!newPassword 
    })
    
    // Validation des param√®tres
    if (!email || !token || !newPassword) {
      console.warn('‚ùå Param√®tres manquants pour resetPasswordWithCustomToken')
      return { success: false, error: 'missing_parameters' }
    }
    
    if (newPassword.length < 6) {
      console.warn('‚ùå Mot de passe trop court')
      return { success: false, error: 'weak_password' }
    }
    
    // TODO: Ici on devrait v√©rifier que le token custom est valide
    // Pour l'instant, on accepte tous les tokens pour le d√©veloppement
    console.log('üîç Validation du token custom...', { token: token.substring(0, 6) + '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' })
    
    try {
      // V√©rifier si l'utilisateur existe d√©j√†
      let user = null
      try {
        user = await admin.auth().getUserByEmail(email)
        console.log('‚úÖ Utilisateur existant trouv√©', { uid: user.uid })
        
        // Mettre √† jour le mot de passe
        await admin.auth().updateUser(user.uid, {
          password: newPassword
        })
        console.log('‚úÖ Mot de passe mis √† jour pour utilisateur existant')
        
      } catch (getUserError) {
        if (getUserError.code === 'auth/user-not-found') {
          console.log('üë§ Utilisateur non trouv√©, cr√©ation d\'un nouveau compte')
          
          // Cr√©er un nouvel utilisateur
          const newUser = await admin.auth().createUser({
            email: email,
            password: newPassword,
            emailVerified: true // On consid√®re l'email v√©rifi√© via le token
          })
          console.log('‚úÖ Nouvel utilisateur cr√©√©', { uid: newUser.uid })
          
        } else {
          throw getUserError
        }
      }
      
      return { success: true, message: 'Mot de passe r√©initialis√© avec succ√®s' }
      
    } catch (authError) {
      console.error('‚ùå Erreur Firebase Auth:', authError)
      return { success: false, error: 'auth_error', details: authError.message }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale dans resetPasswordWithCustomToken:', error)
    return { success: false, error: 'internal_error', details: error.message }
  }
});

// ===== FONCTIONS DE GESTION DE L'AUDIT =====

/**
 * R√©cup√®re la configuration actuelle de l'audit
 */
exports.getAuditConfig = functions.https.onCall(async (data, context) => {
  try {
    // V√©rifier l'authentification
    if (!context.auth) {
      return { success: false, error: 'unauthenticated' }
    }
    
    const { environment } = data || {}
    
    if (!environment || !['staging', 'production'].includes(environment)) {
      return { success: false, error: 'invalid_environment' }
    }
    
    // Lire la configuration via les variables d'environnement
    let isEnabled = false
    let configValue = undefined
    
    if (environment === 'production') {
      // Production: activ√© par d√©faut, d√©sactiv√© seulement si explicitement false
      configValue = process.env.AUDIT_PRODUCTION_ENABLED || undefined
      isEnabled = configValue !== 'false' && configValue !== false
    } else {
      // Staging: d√©sactiv√© par d√©faut, activ√© seulement si explicitement true
      configValue = process.env.AUDIT_STAGING_ENABLED || undefined
      isEnabled = configValue === 'true' || configValue === true
    }
    
    return {
      success: true,
      environment,
      isEnabled,
      configValue,
      message: isEnabled 
        ? `Audit activ√© en ${environment}`
        : `Audit d√©sactiv√© en ${environment}`
    }
    
  } catch (error) {
    console.error('‚ùå Erreur dans getAuditConfig:', error)
    return { success: false, error: 'internal_error', details: error.message }
  }
})

/**
 * Active l'audit pour un environnement
 */
exports.enableAudit = functions.https.onCall(async (data, context) => {
  try {
    // V√©rifier l'authentification
    if (!context.auth) {
      return { success: false, error: 'unauthenticated' }
    }
    
    const { environment } = data || {}
    
    if (!environment || !['staging', 'production'].includes(environment)) {
      return { success: false, error: 'invalid_environment' }
    }
    
    try {
      if (environment === 'production') {
        // Pour production, activer = supprimer le secret (car activ√© par d√©faut)
        const result = await deleteFirebaseSecret('AUDIT_PRODUCTION_ENABLED');
        
        return {
          success: true,
          message: '‚úÖ Audit activ√© en production',
          action: result.action,
          details: 'Le secret AUDIT_PRODUCTION_ENABLED a √©t√© supprim√©. L\'audit est maintenant activ√© par d√©faut.',
          requiresRedeploy: true,
          redeployCommand: 'firebase deploy --only functions'
        }
      } else {
        // Pour staging, activer = d√©finir le secret √† true
        const result = await setFirebaseSecret('AUDIT_STAGING_ENABLED', 'true');
        
        return {
          success: true,
          message: '‚úÖ Audit activ√© en staging',
          action: result.action,
          details: 'Le secret AUDIT_STAGING_ENABLED a √©t√© d√©fini √† "true".',
          requiresRedeploy: true,
          redeployCommand: 'firebase deploy --only functions'
        }
      }
    } catch (secretError) {
      console.error('‚ùå Erreur lors de la modification du secret:', secretError);
      return {
        success: false,
        error: 'secret_management_error',
        message: 'Erreur lors de la modification du secret Firebase',
        details: secretError.message
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur dans enableAudit:', error)
    return { success: false, error: 'internal_error', details: error.message }
  }
})

/**
 * D√©sactive l'audit pour un environnement
 */
exports.disableAudit = functions.https.onCall(async (data, context) => {
  try {
    // V√©rifier l'authentification
    if (!context.auth) {
      return { success: false, error: 'unauthenticated' }
    }
    
    const { environment } = data || {}
    
    if (!environment || !['staging', 'production'].includes(environment)) {
      return { success: false, error: 'invalid_environment' }
    }
    
    try {
      if (environment === 'production') {
        // Pour production, d√©sactiver = d√©finir le secret √† false
        const result = await setFirebaseSecret('AUDIT_PRODUCTION_ENABLED', 'false');
        
        return {
          success: true,
          message: '‚ö†Ô∏è Audit d√©sactiv√© en production',
          action: result.action,
          details: 'Le secret AUDIT_PRODUCTION_ENABLED a √©t√© d√©fini √† "false".',
          warning: 'D√©sactiver l\'audit en production r√©duit la tra√ßabilit√© des actions.',
          requiresRedeploy: true,
          redeployCommand: 'firebase deploy --only functions'
        }
      } else {
        // Pour staging, d√©sactiver = supprimer le secret (car d√©sactiv√© par d√©faut)
        const result = await deleteFirebaseSecret('AUDIT_STAGING_ENABLED');
        
        return {
          success: true,
          message: '‚úÖ Audit d√©sactiv√© en staging',
          action: result.action,
          details: 'Le secret AUDIT_STAGING_ENABLED a √©t√© supprim√©. L\'audit est maintenant d√©sactiv√© par d√©faut.',
          requiresRedeploy: true,
          redeployCommand: 'firebase deploy --only functions'
        }
      }
    } catch (secretError) {
      console.error('‚ùå Erreur lors de la modification du secret:', secretError);
      return {
        success: false,
        error: 'secret_management_error',
        message: 'Erreur lors de la modification du secret Firebase',
        details: secretError.message
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur dans disableAudit:', error)
    return { success: false, error: 'internal_error', details: error.message }
  }
}) 